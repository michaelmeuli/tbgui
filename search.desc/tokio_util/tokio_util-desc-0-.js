searchState.loadedDescShard("tokio_util", 0, "Utilities for working with Tokio.\nModule defining an Either type.\nSynchronization primitives\nCombines two different futures, streams, or sinks having …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA token which can be used to signal a cancellation request …\nA wrapper for cancellation token which automatically …\nA wrapper around <code>Semaphore</code> that provides a <code>poll_acquire</code> …\nError returned by the <code>PollSender</code> when the channel is …\nA wrapper around <code>mpsc::Sender</code> that can be polled.\nA reusable <code>Pin&lt;Box&lt;dyn Future&lt;Output = T&gt; + Send + &#39;a&gt;&gt;</code>.\nA Future that is resolved once the corresponding …\nA Future that is resolved once the corresponding …\nAborts the current in-progress send, if any.\nAdds <code>n</code> new permits to the semaphore.\nReturns the current number of available permits.\nCancel the <code>CancellationToken</code> and all child tokens which …\nReturns a <code>Future</code> that gets fulfilled when cancellation is …\nReturns a <code>Future</code> that gets fulfilled when cancellation is …\nCreates a <code>CancellationToken</code> which will get cancelled …\nCreates a clone of the <code>CancellationToken</code> which will get …\nClones this <code>PollSender</code>.\nObtain a clone of the inner semaphore.\nCloses the semaphore.\nCloses this sender.\nReturns stored cancellation token and removes this drop …\nCreates a <code>DropGuard</code> for this token.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a pinned reference to the underlying future.\nGets a reference to the <code>Sender</code> of the underlying channel.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet back the inner semaphore.\nConsumes the stored value, if any.\nReturns <code>true</code> if the <code>CancellationToken</code> is cancelled.\nChecks whether this sender is been closed.\nCreates a new <code>CancellationToken</code> in the non-cancelled state.\nCreate a new <code>PollSemaphore</code>.\nCreate a new <code>ReusableBoxFuture&lt;T&gt;</code> containing the provided …\nCreates a new <code>PollSender</code>.\nPoll the future stored inside this box.\nPoll the future stored inside this box.\nPoll to acquire a permit from the semaphore.\nPoll to acquire many permits from the semaphore.\nAttempts to prepare the sender to receive a value.\nRuns a future to completion and returns its result wrapped …\nSends an item to the channel.\nReplace the future currently stored in this box.\nReplace the future currently stored in this box.")