searchState.loadedDescShard("seize", 0, "Seize\nA type that can be pointer-cast to and from a <code>Link</code>.\nFast, efficient, and robust memory reclamation.\nA guard that keeps the current thread marked as active, …\nA link to the collector.\nA value linked to a collector.\nSets the number of values that must be in a batch before …\nCast this <code>link</code> to it’s underlying type.\nGet a reference to the collector this guard we created …\nRetires a value, running <code>reclaim</code> when no threads hold a …\nMarks the current thread as active, returning a guard that …\nSets the frequency of epoch advancement.\nFlush any retired values in the local batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLink a value to the collector.\nLinks a value to the collector and allocates it with <code>Box</code>.\nCreates a new <code>Linked</code> object with the given value.\nCreates a new collector.\nProtects the load of an atomic pointer.\nReturns true if both references point to the same …\nCommon memory reclaimers.\nRefreshes the guard.\nRetires a value, running <code>reclaim</code> when no threads hold a …\nReturns a numeric identifier for the current thread.\nReturns a dummy guard.\nReclaims memory allocated with <code>Box</code>.\nReclaims memory by dropping the value in place.")