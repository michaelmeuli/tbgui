searchState.loadedDescShard("pkcs5", 0, "RustCrypto: PKCS#5\n<code>AlgorithmIdentifier</code> reference which has <code>AnyRef</code> parameters.\nGiven parameters are invalid for this algorithm\nDecryption Failed\nEncryption Failed\nSupported PKCS#5 password-based encryption schemes.\nContains the error value\nError type\nMaximum size of a BER/DER-encoded OID in bytes.\nPbes1 support is limited to parsing; encryption/decryption …\nObject identifier (OID).\nContains the success value\nPassword-Based Encryption Scheme 1 as defined in RFC 8018 …\nPassword-Based Encryption Scheme 2 as defined in RFC 8018 …\nResult type\nAlgorithm is not supported\nReturn the arc with the given index, if it exists.\nIterate over the arcs (a.k.a. nodes) of an <code>ObjectIdentifier</code>…\nGet the BER/DER serialization of this OID as bytes.\nAttempt to decrypt the given ciphertext, allocating and …\nAttempt to decrypt the given ciphertext in-place using a …\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nEncrypt the given plaintext, allocating and returning a …\nEncrypt the given ciphertext in-place using a key derived …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse an OID from a slice of <code>Arc</code> values (i.e. integers).\nParse an OID from from its BER/DER encoding.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the length of this <code>ObjectIdentifier</code> in arcs.\nParse an <code>ObjectIdentifier</code> from the dot-delimited string …\nParse an <code>ObjectIdentifier</code> from the dot-delimited string …\nGet the <code>ObjectIdentifier</code> (a.k.a OID) for this algorithm.\nAlgorithm OID, i.e. the <code>algorithm</code> field in the …\nAlgorithm <code>parameters</code>.\nGet the parent OID of this one (if applicable).\nPassword-Based Encryption Scheme 1 as defined in RFC 8018 …\nGet <code>pbes1::Parameters</code> if it is the selected algorithm.\nPassword-Based Encryption Scheme 2 as defined in RFC 8018 …\nGet <code>pbes2::Parameters</code> if it is the selected algorithm.\nPush an additional arc onto this OID, returning the child …\nOID for algorithm for which the parameters were invalid\nOID of unsupported algorithm\nPassword-Based Encryption Scheme 1 algorithms as defined …\nDES in CBC mode\nDigest algorithms supported by PBES1.\nPassword-Based Encryption Scheme 1 ciphersuites as defined …\nMD2\nMD5\n<code>pbeWithMD2AndDES-CBC</code> Object Identifier (OID).\n<code>pbeWithMD2AndRC2-CBC</code> Object Identifier (OID).\n<code>pbeWithMD5AndDES-CBC</code> Object Identifier (OID).\n<code>pbeWithMD5AndRC2-CBC</code> Object Identifier (OID).\n<code>pbeWithSHA1AndDES-CBC</code> Object Identifier (OID).\n<code>pbeWithSHA1AndRC2-CBC</code> Object Identifier (OID).\nPassword-Based Encryption Scheme 1 parameters as defined …\n<code>pbeWithMD2AndDES-CBC</code>\n<code>pbeWithMD2AndRC2-CBC</code>\n<code>pbeWithMD5AndDES-CBC</code>\n<code>pbeWithMD5AndRC2-CBC</code>\n<code>pbeWithSHA1AndDES-CBC</code>\n<code>pbeWithSHA1AndRC2-CBC</code>\nRC2 in CBC mode\nLength of a PBES1 salt (as defined in the <code>PBEParameter</code> …\nSHA-1\nSymmetric encryption ciphers supported by PBES1.\nGet the <code>SymmetricCipher</code> to be used.\nGet the <code>DigestAlgorithm</code> to be used.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nEncryption scheme.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIteration count\nGet the <code>ObjectIdentifier</code> (a.k.a OID) for this algorithm.\nGet the <code>ObjectIdentifier</code> (a.k.a OID) for this algorithm.\nScheme parameters.\nSalt value\n128-bit Advanced Encryption Standard (AES) algorithm with …\n192-bit Advanced Encryption Standard (AES) algorithm with …\n256-bit Advanced Encryption Standard (AES) algorithm with …\nAES-128 in CBC mode\nAES-192 in CBC mode\nAES-256 in CBC mode\nSymmetric encryption scheme used by PBES2.\nHMAC-SHA1 (for use with PBKDF2)\nHMAC-SHA-256 (for use with PBKDF2)\nHMAC with SHA1\nHMAC with SHA-224\nHMAC with SHA-256\nHMAC with SHA-384\nHMAC with SHA-512\nPassword-based key derivation function.\nImplementation defined maximum iteration count of …\nPassword-Based Encryption Scheme 2 (PBES2) OID.\nPassword-Based Key Derivation Function (PBKDF2) OID.\nPassword-Based Encryption Scheme 2 parameters as defined …\nPassword-Based Key Derivation Function 2 (PBKDF2).\nPassword-Based Key Derivation Scheme 2 parameters as …\nPseudo-random function used by PBKDF2.\n<code>id-scrypt</code> (RFC 7914)\nscrypt sequential memory-hard password hashing function.\nscrypt parameters as defined in RFC 7914 Section 7.1.\nBlock size parameter <code>r</code>.\nCPU/Memory cost parameter <code>N</code>.\nAttempt to decrypt the given ciphertext, allocating and …\nAttempt to decrypt the given ciphertext in-place using a …\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nCompute the length of this value in bytes when encoded as …\nEncrypt the given plaintext, allocating and returning a …\nEncrypt the given plaintext in-place using a key derived …\nEncryption scheme\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the <code>ScryptParams</code> for the provided upstream …\nInitialize PBKDF2-SHA256 with the given iteration count …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the selected KDF PBKDF2?\nIs the selected KDF scrypt?\nPBKDF2 iteration count\nKey derivation function\nGet derived key length in bytes, if defined.\nPBKDF2 output length\nPBKDF2 output length\nGet the size of a key used by this algorithm in bytes.\nGet the <code>ObjectIdentifier</code> (a.k.a OID) for this algorithm.\nGet the <code>ObjectIdentifier</code> (a.k.a OID) for this algorithm.\nGet the <code>ObjectIdentifier</code> (a.k.a OID) for this algorithm.\nParallelization parameter <code>p</code>.\nGet <code>Pbkdf2Params</code> if it is the selected algorithm.\nInitialize PBES2 parameters using PBKDF2-SHA256 as the …\nInitialize PBES2 parameters using PBKDF2-SHA256 as the …\nPseudo-random function to use with PBKDF2\nPBKDF2 salt\nscrypt salt\nGet <code>ScryptParams</code> if it is the selected algorithm.\nInitialize PBES2 parameters using scrypt as the …\nInitialize PBES2 parameters using scrypt as the …\nConvenience function to turn the OID (see <code>oid</code>) of this <code>Kdf</code> …\nConvenience function to turn the OID (see <code>oid</code>) of this …\nInitialization vector\nInitialization vector\nInitialization vector")