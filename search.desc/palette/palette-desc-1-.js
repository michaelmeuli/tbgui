searchState.loadedDescShard("palette", 1, "Get an owned, cloned version of this color.\nGet an owned, cloned version of this color.\nThe color.\nGet an owned, copied version of this color.\nGet an owned, copied version of this color.\nReturn an iterator that moves colors out of the specified …\nReturns the argument unchanged.\nConvert from a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.\nGet a color, or slice of colors, with references to the …\nGet a color, or slice of colors, that allows modifying the …\nCalls <code>U::from(self)</code>.\nConvert to a <code>(x, y, luma)</code>, a.k.a. <code>(x, y, Y)</code> tuple.\nReturn an iterator over the colors in the wrapped …\nReturn an iterator that allows modifying the colors in the …\nluma (Y) was a measure of the brightness or luminance of a …\nReturn the <code>luma</code> value maximum.\nReturn the <code>x</code> value maximum.\nReturn the <code>y</code> value maximum.\nReturn the <code>luma</code> value minimum.\nReturn the <code>x</code> value minimum.\nReturn the <code>y</code> value minimum.\nCreate a CIE Yxy color.\nPop a color’s components from the component vectors. See …\nPush an additional color’s components onto the component …\nUpdate this color with new values.\nThe white point associated with the color’s illuminant …\nCreate a struct of vectors with a minimum capacity. See …\nChanges the reference white point without changing the …\nx chromaticity co-ordinate derived from XYZ color space as …\ny chromaticity co-ordinate derived from XYZ color space as …")