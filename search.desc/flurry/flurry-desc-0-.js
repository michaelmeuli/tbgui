searchState.loadedDescShard("flurry", 0, "A concurrent hash table based on Java’s <code>ConcurrentHashMap</code>…\nDefault hash builder for <code>HashMap</code>.\nDefault hasher for <code>HashMap</code>.\nA guard that keeps the current thread marked as active, …\nA concurrent hash table.\nA reference to a <code>HashMap</code>, constructed with <code>HashMap::pin</code> or …\nA concurrent hash set implemented as a <code>HashMap</code> where the …\nA reference to a <code>HashSet</code>, constructed with <code>HashSet::pin</code> or …\nThe error type for the <code>HashMap::try_insert</code> method.\nClears the map, removing all key-value pairs.\nClears the map, removing all key-value pairs.\nClears the set, removing all elements.\nClears the set, removing all elements.\nGet a reference to the collector this guard we created …\nIf the value for the specified <code>key</code> is present, attempts to …\nIf the value for the specified <code>key</code> is present, attempts to …\nReturns <code>true</code> if the given value is an element of this set.\nReturns <code>true</code> if the given value is an element of this set.\nReturns <code>true</code> if the map contains a value for the specified …\nReturns <code>true</code> if the map contains a value for the specified …\nA reference to the current value mapped to the key.\nRetires a value, running <code>reclaim</code> when no threads hold a …\nFlush any retired values in the local batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the element in the set, if any, …\nReturns a reference to the element in the set, if any, …\nReturns the key-value pair corresponding to <code>key</code>.\nReturns the key-value pair corresponding to <code>key</code>.\nPin a <code>Guard</code> for use with this map.\nPin a <code>Guard</code> for use with this set.\nInserts a key-value pair into the map.\nInserts a key-value pair into the map.\nAdds a value to the set.\nAdds a value to the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.\nReturns <code>true</code> if the map is empty. Otherwise returns <code>false</code>.\nReturns <code>true</code> if the map is empty. Otherwise returns <code>false</code>.\nReturns <code>true</code> if the set is empty. Otherwise returns <code>false</code>.\nReturns <code>true</code> if the set is empty. Otherwise returns <code>false</code>.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nReturns <code>true</code> if the set is a superset of another, i.e., …\nIterator types.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all elements in arbitrary order.\nAn iterator visiting all elements in arbitrary order.\nAn iterator visiting all keys in arbitrary order.\nAn iterator visiting all keys in arbitrary order.\nReturns the number of entries in the map.\nReturns the number of entries in the map.\nReturns the number of elements in the set.\nReturns the number of elements in the set.\nCreates an empty <code>HashMap</code>.\nCreates an empty <code>HashSet</code>.\nThe value that <code>HashMap::try_insert</code> failed to insert.\nGet a reference to this map with the current thread pinned.\nGet a reference to this set with the current thread pinned.\nProtects the load of an atomic pointer.\nRefreshes the guard.\nRemoves a key-value pair from the map, and returns the …\nRemoves a key-value pair from the map, and returns the …\nRemoves a value from the set.\nRemoves a value from the set.\nRemoves a key from the map, returning the stored key and …\nRemoves a key from the map, returning the stored key and …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve capacity for at least <code>additional</code> more …\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nRemoves and returns the value in the set, if any, that is …\nRemoves and returns the value in the set, if any, that is …\nReturns a numeric identifier for the current thread.\nInserts a key-value pair into the map unless the key …\nInserts a key-value pair into the map unless the key …\nReturns a dummy guard.\nAn iterator visiting all values in arbitrary order.\nAn iterator visiting all values in arbitrary order.\nCreates an empty <code>HashMap</code> with the specified capacity.\nCreates an empty <code>HashSet</code> with the specified capacity.\nCreates an empty map with the specified <code>capacity</code>, using …\nCreates an empty set with the specified <code>capacity</code>, using …\nAssociate a custom <code>seize::Collector</code> with this map.\nGet a reference to this map with the given guard.\nGet a reference to this set with the given guard.\nCreates an empty map which will use <code>hash_builder</code> to hash …\nCreates an empty set which will use <code>hash_builder</code> to hash …\nAn iterator over a map’s entries.\nAn iterator over a map’s keys.\nAn iterator over a map’s values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")