searchState.loadedDescShard("ssh_encoding", 0, "RustCrypto: SSH Encoding\nBase64-related errors.\nConstant-time Base64 reader implementation.\nConstant-time Base64 writer implementation.\nCarriage return: <code>\\r</code> (Pre-OS X Macintosh)\nCarriage return + line feed: <code>\\r\\n</code> (Windows)\nCharacter encoding-related errors.\nExtension trait for providing checked <code>Iterator::sum</code>-like …\nDecoding trait.\nDecoding trait for PEM documents.\nEncoding trait.\nEncoding trait for PEM documents.\nContains the error value\nError type.\nType returned in the event of a decoding error.\nLine feed: <code>\\n</code> (Unix OSes)\nLabels for e.g. cryptographic algorithms.\nInvalid label.\nErrors related to labels.\nInvalid length.\nLine endings: variants of newline characters that can be …\nReader type used by <code>Reader::read_prefixed</code>.\nContains the success value\nOverflow errors.\nPEM encoding errors.\nReader trait which decodes the binary SSH protocol …\nResult type with <code>ssh-encoding</code> crate’s <code>Error</code> as the error …\nUnexpected trailing data at end of message.\nWriter trait which encodes the SSH binary format to …\nGet the byte serialization of this <code>LineEnding</code>.\nIterate over the values of this type, computing a checked …\nAttempt to decode a value of this type using the provided …\nDecode the provided PEM-encoded string, interpreting the …\nDrain the given number of bytes from the reader, …\nDrain the given number of bytes from the reader, …\nDecode a <code>u32</code> length prefix, and then drain the length of …\nDecode a <code>u32</code> length prefix, and then drain the length of …\nEncode this value using the provided <code>Writer</code>.\nEncode this type using the <code>Encode</code> trait, writing the …\nEncode this type using the <code>Encode</code> trait, writing the …\nEncode this value, first prepending a <code>uint32</code> length prefix …\nEncode this value, first prepending a <code>uint32</code> length prefix …\nGet the length of this type encoded in bytes, prior to …\nReturn the length of this type after encoding when …\nReturn the length of this type after encoding when …\nFinish decoding, returning the given value if there is no …\nFinish decoding, returning the given value if there is no …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs decoding finished?\nIs decoding finished?\nThe invalid label string (if available).\nGet the encoded length of this <code>LineEnding</code>.\nCreate a new <code>LabelError</code> for the given invalid label.\nRead as much data as is needed to exactly fill <code>out</code>.\nDecodes <code>[u8]</code> from <code>byte[n]</code> as described in RFC4251 § 5:\nDecodes <code>[u8]</code> from <code>byte[n]</code> as described in RFC4251 § 5:\nDecode length-prefixed data.\nDecode length-prefixed data.\nDecode a <code>string</code> as described in RFC4251 § 5:\nDecode a <code>string</code> as described in RFC4251 § 5:\nGet the length of the remaining data after Base64 decoding.\nWrite the given bytes to the writer.\nNumber of bytes of remaining data at end of message.")