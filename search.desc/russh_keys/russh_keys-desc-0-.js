searchState.loadedDescShard("russh_keys", 0, "This crate contains methods to deal with SSH keys, as …\nKey for AES128\nKey for AES256\nAgent protocol error\nThe key could not be read, for an unknown reason\nThe type of the key is unsupported\nThe type of the key is unsupported\nAES encryption key.\nIndex out of bounds\nThe server key has changed\nThe key contents are inconsistent\nThe key is encrypted (should supply a password?)\nHome directory could not be found\nThe key uses an unsupported algorithm\nUnknown signature type\nThe type of the key is unsupported\nA module to write SSH agent.\nCheck whether the host is known, from its standard …\nCheck that a server key matches the one recorded in file …\nDecode a secret key given in the OpenSSH format, …\nDecode a secret key in the PKCS#5 format, possibly …\nDecode a secret key, possibly deciphering it with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the server key that matches the one recorded in the …\nGet the server key that matches the one recorded in <code>path</code>.\nRecord a host’s public key into the user’s known_hosts …\nRecord a host’s public key into a nonstandard location.\nLoad a openssh certificate\nLoad a public key from a file. Ed25519, EC-DSA and RSA …\nLoad a secret key, deciphering it with the supplied …\nReads a public key from the standard encoding. In some …\nCreate the base64 part of the public key blob.\nWrite a public key onto the provided <code>Write</code>, encoded in …\nSignatures need to be confirmed by the agent (for instance …\nConstraints on how keys can be used\nCustom constraints\nThe key shall disappear from the agent’s memory after …\nWrite clients for SSH agents.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrite servers for SSH agents.\nSSH agent client.\nSend a key to the agent, with a (possibly empty) slice of …\nAdd a smart card to the agent, with a (possibly empty) set …\nBuild a future that connects to an SSH agent via the …\nBuild a future that connects to an SSH agent via the …\nBuild a future that connects to an SSH agent via the …\nSend a custom message to the agent.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLock the agent, making it refuse to sign until unlocked.\nAsk the agent what extensions about supported extensions.\nAsk the agent to forget all known keys.\nAsk the agent to remove a key from its memory.\nAsk the agent to remove a smartcard from its memory.\nAsk the agent for a list of the currently registered secret\nAsk the agent to sign the supplied piece of data.\nAsk the agent to sign the supplied piece of data.\nAsk the agent to sign the supplied piece of data, and …\nUnlock the agent, allowing it to sign again.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn ECC private key.\nAn ECC public key.\nReturns the ECC public key algorithm name defined in RFC …\nReturns the ECC public key algorithm name defined in RFC …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>PrivateKey</code> from algorithm name and SEC1-encoded …\nReturns the elliptic curve domain parameter identifiers …\nReturns the elliptic curve domain parameter identifiers …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>PrivateKey</code> with algorithm name and scalar.\nReturns the public key.\nReturns the SEC1-encoded public curve point.\nReturns the secret scalar in bytes.\nSign the message with associated digest algorithm.\nVerifies message against signature <code>(r, s)</code> using the …\nEncode in the SSH format.\nA cursor-like type to read SSH-encoded values.\nA cursor-like trait to read SSH-encoded things.\nTrait for reading value in SSH-encoded format.\nTrait for writing value in SSH-encoded format.\nPush an SSH-encoded list.\nPush an SSH-encoded value.\nPush an SSH-encoded multiple-precision integer.\nPush an SSH-encoded string to <code>self</code>.\nPush an SSH-encoded blank string of length <code>s</code> to <code>self</code>.\nPush a nested SSH-encoded value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEncoding length of the given mpint.\nRead one byte from this reader.\nRead one byte from this reader.\nRead the value from a position.\nRead one string from this reader.\nRead a <code>u32</code> from this reader.\nCreate an SSH reader for <code>self</code>.\nPush an SSH-encoded empty list.\nWrite the value.\nThe name of the ecdsa-sha2-nistp256 algorithm for SSH.\nThe name of the ecdsa-sha2-nistp384 algorithm for SSH.\nThe name of the ecdsa-sha2-nistp521 algorithm for SSH.\nThe name of the Ed25519 algorithm for SSH.\nPublic key exchange algorithms.\nName of a public key algorithm.\nPublic key\nThe name of the ssh-sha2-256 algorithm for SSH.\nThe name of the ssh-sha2-512 algorithm for SSH.\nExtra CRT parameters for RSA private key.\nSHA1\nSHA2, 256 bits.\nSHA2, 512 bits.\nThe hash function used for signing with RSA keys.\nCopy the public key of this algorithm.\n<code>d mod (p-1)</code>.\n<code>d mod (q-1)</code>.\nCompute the key fingerprint, hashed with sha2-256.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a ED25519 key pair.\nGenerate a RSA key pair.\nBase name of the private key file for a key name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nName of this key algorithm.\nAlgorithm name for that key.\nParse a public key in SSH format.\nParse a public key from a byte slice.\nObtain a cryptographic-safe random number generator.\nSign a slice using this algorithm.\nVerify a signature.\nCreate a copy of an RSA key with a specified hash …\nDecode a secret key given in the OpenSSH format, …\nDecode a secret key in the PKCS#5 format, possibly …\nDecode a PKCS#8-encoded private key.\nEncode a Decode a PKCS#8-encoded private key.\nEncode a password-protected PKCS#8-encoded private key.\nSSH RSA private key.\nSSH RSA public key.\nCRT coefficient: <code>(inverse of q) mod p</code>.\nComment.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>n</code>: RSA modulus.\n<code>p</code>: first prime factor of <code>n</code>.\n<code>q</code>: Second prime factor of <code>n</code>.\n<code>d</code>: RSA private exponent.\n<code>e</code>: RSA public exponent.\nRSA public key.\nAn ECDSA signature\nAn Ed25519 signature\nAn RSA signature\nThe type of a signature, depending on the algorithm used.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAlgorithm name defined in RFC 5656 section 3.1.2, in the …\nSignature blob defined in RFC 5656 section 3.1.2.")