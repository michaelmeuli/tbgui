searchState.loadedDescShard("iced_widget", 0, "Use the built-in widgets or create your own.\nA list with all the defined themes.\nThe built-in Catppuccin Frappé variant.\nThe built-in Catppuccin Latte variant.\nThe built-in Catppuccin Macchiato variant.\nThe built-in Catppuccin Mocha variant.\nA <code>Theme</code> that uses a <code>Custom</code> palette.\nThe built-in dark variant.\nThe built-in Dracula variant.\nThe built-in Ferra variant:\nThe built-in Gruvbox Dark variant.\nThe built-in Gruvbox Light variant.\nThe built-in Kanagawa Dragon variant.\nThe built-in Kanagawa Lotus variant.\nThe built-in Kanagawa Wave variant.\nThe built-in light variant.\nThe built-in Moonfly variant.\nThe built-in Nightfly variant.\nThe built-in Nord variant.\nThe built-in Oxocarbon variant.\nThe primary rendering option.\nThe default graphics renderer for <code>iced</code>.\nThe secondary (or fallback) rendering option.\nThe built-in Solarized Dark variant.\nThe built-in Solarized Light variant.\nA built-in theme.\nThe built-in Tokyo Night variant.\nThe built-in Tokyo Night Light variant.\nThe built-in Tokyo Night Storm variant.\nButtons allow your users to perform actions by pressing …\nCreates a new <code>Button</code> with the provided content.\nCreates a new <code>Container</code> that fills all the available space …\nCheckboxes can be used to let users make binary choices.\nCreates a new <code>Checkbox</code>.\nCreates a new <code>Column</code> with the given children.\nCreates a <code>Column</code> with the given children.\nCreates a <code>Column</code> with the given children.\nCombo boxes display a dropdown list of searchable and …\nCreates a new <code>ComboBox</code>.\nContainers let you align a widget inside their boundaries.\nCreates a new <code>Container</code> with the provided content.\nCreates a new custom <code>Theme</code> from the given <code>Palette</code>.\nCreates a new custom <code>Theme</code> from the given <code>Palette</code>, with a …\nReturns the <code>palette::Extended</code> of the <code>Theme</code>.\nFocuses the next focusable widget.\nFocuses the previous focusable widget.\nReturns the argument unchanged.\nCreates a horizontal <code>Rule</code> with the given height.\nCreates a new <code>Space</code> widget that fills the available …\nDisplays a widget on top of another one, only when the …\nCreates an <code>Element</code> that displays the iced logo with the …\nCalls <code>U::from(self)</code>.\nKeyed widgets can provide hints to ensure continuity.\nCreates a new <code>keyed::Column</code> from an iterator of elements.\nCreates a keyed <code>Column</code> with the given children.\nA container intercepting mouse events.\nWraps the given widget and captures any mouse button …\nDisplay interactive elements on top of other widgets.\nReturns the <code>Palette</code> of the <code>Theme</code>.\nPane grids let your users split regions of your …\nCreates a <code>PaneGrid</code> with the given <code>pane_grid::State</code> and …\nPick lists display a dropdown list of selectable options.\nCreates a new <code>PickList</code>.\nProgress bars visualize the progression of an extended …\nCreates a new <code>ProgressBar</code>.\nRadio buttons let users choose a single option from a …\nCreates a new <code>Radio</code>.\nCreates a new <code>Rich</code> text widget with the provided spans.\nCreates some <code>Rich</code> text with the given spans.\nCreates some <code>Rich</code> text with the given spans.\nCreates a new <code>Row</code> from an iterator.\nCreates a <code>Row</code> with the given children.\nCreates a <code>Row</code> with the given children.\nRules divide space horizontally or vertically.\nScrollables let users navigate an endless amount of …\nCreates a new <code>Scrollable</code> with the provided content.\nA custom shader widget for wgpu applications.\nCreates a new <code>Shader</code>.\nSliders let users set a value by moving an indicator.\nCreates a new <code>Slider</code>.\nCreates a new <code>Span</code> of text with the provided content.\nCreates a new <code>Stack</code> with the given children.\nCreates a <code>Stack</code> with the given children.\nCreates a <code>Stack</code> with the given children.\nSvg widgets display vector graphics in your application.\nCreates a new <code>Svg</code> widget from the given <code>Handle</code>.\nDraw and interact with text.\nCreates a new <code>Text</code> widget with the provided content.\nCreates a new <code>Text</code> widget with the provided content.\nCreates a new <code>Text</code> widget with the provided content.\nText editors display a multi-line text input for text …\nCreates a new <code>TextEditor</code>.\nText inputs display fields that can be filled with text.\nCreates a new <code>TextInput</code>.\nUse the built-in theme and styles.\nA widget that applies any <code>Theme</code> to its contents.\nTogglers let users make binary choices by toggling a …\nCreates a new <code>Toggler</code>.\nTooltips display a hint of information over some element …\nCreates a new <code>Tooltip</code> for the provided content with the …\nCreates a new <code>Text</code> widget that displays the provided value.\nCreates a vertical <code>Rule</code> with the given width.\nSliders let users set a value by moving an indicator.\nCreates a new <code>VerticalSlider</code>.\nCreates a new <code>Space</code> widget that fills the available …\nThe <code>Button</code> can be pressed.\nA generic widget that produces a message when pressed.\nThe theme catalog of a <code>Button</code>.\nThe item class of the <code>Catalog</code>.\nThe <code>Button</code> cannot be pressed.\nThe <code>Button</code> can be pressed and it is being hovered.\nThe <code>Button</code> is being pressed.\nThe possible status of a <code>Button</code>.\nThe style of a button.\nA styling function for a <code>Button</code>.\nThe <code>Background</code> of the button.\nThe <code>Border</code> of the buton.\nSets whether the contents of the <code>Button</code> should be clipped …\nA danger button; denoting a destructive action.\nThe default class produced by the <code>Catalog</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the height of the <code>Button</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Button</code> with the given content.\nSets the message that will be produced when the <code>Button</code> is …\nSets the message that will be produced when the <code>Button</code> is …\nSets the message that will be produced when the <code>Button</code> is …\nSets the <code>Padding</code> of the <code>Button</code>.\nA primary button; denoting a main action.\nA secondary button; denoting a complementary action.\nThe <code>Shadow</code> of the butoon.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>Button</code>.\nA success button; denoting a good outcome.\nA text button; useful for links.\nThe text <code>Color</code> of the button.\nSets the width of the <code>Button</code>.\nUpdates the <code>Style</code> with the given <code>Background</code>.\nThe <code>Checkbox</code> can be interacted with.\nThe theme catalog of a <code>Checkbox</code>.\nA box that can be checked.\nThe item class of the <code>Catalog</code>.\nThe <code>Checkbox</code> cannot be interacted with.\nThe <code>Checkbox</code> can be interacted with and it is being …\nThe icon in a <code>Checkbox</code>.\nThe possible status of a <code>Checkbox</code>.\nThe style of a checkbox.\nA styling function for a <code>Checkbox</code>.\nThe <code>Background</code> of the checkbox.\nThe <code>Border</code> of hte checkbox.\nThe unicode code point that will be used as the icon.\nA danger checkbox; denoting a negaive toggle.\nThe default class produced by the <code>Catalog</code>.\nSets the <code>Renderer::Font</code> of the text of the <code>Checkbox</code>.\nFont that will be used to display the <code>code_point</code>,\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>Icon</code> of the <code>Checkbox</code>.\nThe icon <code>Color</code> of the checkbox.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe line height of the icon.\nCreates a new <code>Checkbox</code>.\nSets the function that will be called when the <code>Checkbox</code> is …\nSets the function that will be called when the <code>Checkbox</code> is …\nA primary checkbox; denoting a main toggle.\nA secondary checkbox; denoting a complementary toggle.\nThe shaping strategy of the icon.\nSets the size of the <code>Checkbox</code>.\nFont size of the content.\nSets the spacing between the <code>Checkbox</code> and the text.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>Checkbox</code>.\nA success checkbox; denoting a positive toggle.\nThe text <code>Color</code> of the checkbox.\nSets the text <code>text::LineHeight</code> of the <code>Checkbox</code>.\nSets the <code>text::Shaping</code> strategy of the <code>Checkbox</code>.\nSets the text size of the <code>Checkbox</code>.\nSets the <code>text::Wrapping</code> strategy of the <code>Checkbox</code>.\nSets the width of the <code>Checkbox</code>.\nIndicates if the <code>Checkbox</code> is currently checked.\nIndicates if the <code>Checkbox</code> is currently checked.\nIndicates if the <code>Checkbox</code> is currently checked.\nThe theme catalog of a <code>ComboBox</code>.\nA widget for searching and selecting a single value from a …\nThe local state of a <code>ComboBox</code>.\nThe default class for the text input of the <code>ComboBox</code>.\nThe default class for the menu of the <code>ComboBox</code>.\nSets the <code>Renderer::Font</code> of the <code>ComboBox</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>text_input::Icon</code> of the <code>ComboBox</code>.\nSets the style of the input of the <code>ComboBox</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the <code>LineHeight</code> of the <code>ComboBox</code>.\nSets the style of the menu of the <code>ComboBox</code>.\nCreates a new <code>ComboBox</code> with the given list of options, a …\nCreates a new <code>State</code> for a <code>ComboBox</code> with the given list of …\nSets the message that will be produced when the outside …\nSets the message that should be produced when some text is …\nSets the message that will be produced when the  <code>ComboBox</code> …\nSets the message that will be produced when an option of …\nReturns the options of the <code>State</code>.\nSets the <code>Padding</code> of the <code>ComboBox</code>.\nSets the text sixe of the <code>ComboBox</code>.\nSets the width of the <code>ComboBox</code>.\nCreates a new <code>State</code> for a <code>ComboBox</code> with the given list of …\nThe theme catalog of a <code>Container</code>.\nThe item class of the <code>Catalog</code>.\nA widget that aligns its contents inside of its boundaries.\nThe identifier of a <code>Container</code>.\nThe appearance of a container.\nA styling function for a <code>Container</code>.\nAligns the contents of the <code>Container</code> to the bottom.\nAligns the contents of the <code>Container</code> to the left.\nAligns the contents of the <code>Container</code> to the right.\nAligns the contents of the <code>Container</code> to the top.\nSets the content alignment for the horizontal axis of the …\nSets the content alignment for the vertical axis of the …\nA <code>Container</code> with the given <code>Background</code>.\nUpdates the background of the <code>Style</code>.\nThe <code>Background</code> of the container.\nUpdates the border of the <code>Style</code>.\nThe <code>Border</code> of the container.\nA bordered <code>Container</code> with a background.\nCenters the contents in both the horizontal and vertical …\nSets the width of the <code>Container</code> and centers its contents …\nSets the height of the <code>Container</code> and centers its contents …\nSets the style class of the <code>Container</code>.\nSets whether the contents of the <code>Container</code> should be …\nUpdates the text color of the <code>Style</code>.\nA <code>Container</code> with a dark background and white text.\nThe default class produced by the <code>Catalog</code>.\nDraws the background of a <code>Container</code> given its <code>Style</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the height of the <code>Container</code>.\nSets the <code>Id</code> of the <code>Container</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the layout of a <code>Container</code>.\nSets the maximum height of the <code>Container</code>.\nSets the maximum width of the <code>Container</code>.\nCreates a <code>Container</code> with the given content.\nCreates a custom <code>Id</code>.\nSets the <code>Padding</code> of the <code>Container</code>.\nA rounded <code>Container</code> with a background.\nUpdates the shadow of the <code>Style</code>.\nThe <code>Shadow</code> of the container.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>Container</code>.\nThe text <code>Color</code> of the container.\nA transparent <code>Container</code>.\nCreates a unique <code>Id</code>.\nProduces a <code>Task</code> that queries the visible screen bounds of …\nSets the width of the <code>Container</code>.\nKeyed columns distribute content vertically while keeping …\nA container that distributes its contents vertically while …\nSets the horizontal alignment of the contents of the <code>Column</code>…\nExtends the <code>Column</code> with the given children.\nReturns the argument unchanged.\nCreates a <code>Column</code> from already allocated <code>Vec</code>s.\nSets the height of the <code>Column</code>.\nCalls <code>U::from(self)</code>.\nSets the maximum width of the <code>Column</code>.\nCreates an empty <code>Column</code>.\nSets the <code>Padding</code> of the <code>Column</code>.\nAdds an element to the <code>Column</code>.\nAdds an element to the <code>Column</code>, if <code>Some</code>.\nSets the vertical spacing <em>between</em> elements.\nSets the width of the <code>Column</code>.\nCreates a <code>Column</code> with the given capacity.\nCreates a <code>Column</code> with the given elements.\nBuild and show dropdown menus.\nThe theme catalog of a <code>Menu</code>.\nThe item class of the <code>Catalog</code>.\nA list of selectable options.\nThe local state of a <code>Menu</code>.\nThe appearance of a <code>Menu</code>.\nA styling function for a <code>Menu</code>.\nThe <code>Background</code> of the menu.\nThe <code>Border</code> of the menu.\nThe default style of the list of a <code>Menu</code>.\nThe default class produced by the <code>Catalog</code>.\nThe default class for the scrollable of the <code>Menu</code>.\nSets the font of the <code>Menu</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Menu</code> with the given <code>State</code>, a list of options,\nCreates a new <code>State</code> for a <code>Menu</code>.\nTurns the <code>Menu</code> into an overlay <code>Element</code> at the given target …\nSets the <code>Padding</code> of the <code>Menu</code>.\nThe background <code>Color</code> of a selected option in the menu.\nThe text <code>Color</code> of a selected option in the menu.\nThe <code>Style</code> of a class with the given status.\nThe text <code>Color</code> of the menu.\nSets the text <code>text::LineHeight</code> of the <code>Menu</code>.\nSets the <code>text::Shaping</code> strategy of the <code>Menu</code>.\nSets the text size of the <code>Menu</code>.\nSets the width of the <code>Menu</code>.\nAll panes are visible\nA fixed reference line for the measurement of coordinates.\nBottom edge.\nA <code>Pane</code> was picked and then dropped outside of other <code>Pane</code> …\nThe theme catalog of a <code>PaneGrid</code>.\nCenter region.\nThe item class of this <code>Catalog</code>.\nThe arrangement of a <code>PaneGrid</code>.\nThe content of a <code>Pane</code>.\nThe visible contents of the <code>PaneGrid</code>\nThe controls of a <code>Pane</code>.\nA four cardinal direction.\n↓\nAn event produced during a drag and drop interaction of a …\nA pane that can be dragged.\nA <code>Pane</code> was dropped on top of another <code>Pane</code>.\nThe edges of an area.\nAn <code>Edge</code> of the full <code>PaneGrid</code>.\nEdge region.\nThe appearance of a highlight of the <code>PaneGrid</code>.\nThe horizontal axis: —\n←\nLeft edge.\nA line.\nA maximized pane is visible\nA layout node of a <code>PaneGrid</code>.\nA rectangular region in a <code>PaneGrid</code> used to display widgets.\nA <code>Pane</code>.\nThe region of this <code>Node</code> is taken by a <code>Pane</code>.\nA single <code>Pane</code> of the <code>PaneGrid</code>.\nA collection of panes distributed using either vertical or …\nA <code>Pane</code> was picked for dragging.\nThe region of a <code>Pane</code>.\nAn event produced during a resize interaction of a <code>PaneGrid</code>…\n→\nRight edge.\nA divider that splits a region in a <code>PaneGrid</code> into two …\nA split of the available space.\nThe region of this <code>Node</code> is split into two.\nThe appearance of a <code>PaneGrid</code>.\nA styling function for a <code>PaneGrid</code>.\nThe <code>Target</code> area a pane can be dropped on.\nThe title bar of a <code>Pane</code>.\nTop edge.\n↑\nThe vertical axis: |\nSets whether or not the <code>controls</code> attached to this <code>TitleBar</code> …\nThe <code>Background</code> of the pane region.\nThe <code>Border</code> of the pane region.\nReturns whether the <code>Draggable</code> with the given <code>Layout</code> can be …\nThe <code>Color</code> of the <code>Line</code>.\nSets the controls of the <code>TitleBar</code>.\nThe default style of a <code>PaneGrid</code>.\nThe default class produced by this <code>Catalog</code>.\nDraws the <code>Content</code> with the provided <code>Renderer</code> and <code>Layout</code>.\nDraws the <code>TitleBar</code> with the provided <code>Renderer</code> and <code>Layout</code>.\nCreates a new <code>Controls</code> with a full and compact variant. If …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the height of the <code>PaneGrid</code>.\nThe appearance of a hovered region highlight.\nThe appearance of a hovered split.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the mouse cursor is over the pick area of …\nReturns an iterator over the values of the <code>Contents</code>\nReturns the layout <code>Node</code> of the <code>Contents</code>\nCreates a new <code>Content</code> with the provided body.\nCreates a new <code>Controls</code> with the given content.\nCreates a new <code>TitleBar</code> with the given content.\nCreates a <code>PaneGrid</code> with the given <code>State</code> and view function.\nSets the message that will be produced when a <code>Pane</code> of the …\nEnables the drag and drop interactions of the <code>PaneGrid</code>, …\nEnables the resize interactions of the <code>PaneGrid</code>, which will\nSets the <code>Padding</code> of the <code>TitleBar</code>.\nReturns the rectangular region for each <code>Pane</code> in the <code>Node</code> …\nThe appearance of a picked split.\nThe new ratio of the <code>Split</code>.\nSets the spacing <em>between</em> the panes of the <code>PaneGrid</code>.\nSplits the provided <code>Rectangle</code> on the current <code>Axis</code> with the …\nThe <code>Split</code> that is being dragged for resizing.\nCalculates the bounds of the split line in a <code>Rectangle</code> …\nReturns the axis, rectangular region, and ratio for each …\nReturns an iterator over each <code>Split</code> in this <code>Node</code>.\nThe state of a <code>PaneGrid</code>.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>Content</code>.\nSets the style of the <code>TitleBar</code>.\nSets the style of the <code>PaneGrid</code>.\nSets the <code>TitleBar</code> of the <code>Content</code>.\nSets the width of the <code>PaneGrid</code>.\nThe width of the <code>Line</code>.\nThe left/top <code>Configuration</code> of the split.\nThe direction of the split.\nThe right/bottom <code>Configuration</code> of the split.\nThe ratio of the split in [0.0, 1.0].\nThe picked <code>Pane</code>.\nThe picked <code>Pane</code>.\nThe picked <code>Pane</code>.\nThe <code>Target</code> where the picked <code>Pane</code> was dropped on.\nThe left/top <code>Node</code> of the split.\nThe direction of the split.\nThe right/bottom <code>Node</code> of the split.\nThe <code>Split</code> of this <code>Node</code>.\nThe ratio of the split in [0.0, 1.0].\nThe current action of a <code>PaneGrid</code>.\nA <code>Pane</code> in the <code>PaneGrid</code> is being dragged.\nThe <code>PaneGrid</code> is idle.\nThe internal state of a <code>PaneGrid</code>.\nA <code>Split</code> in the <code>PaneGrid</code> is being dragged.\nThe state of a <code>PaneGrid</code>.\nReturns the adjacent <code>Pane</code> of another <code>Pane</code> in the given …\nCloses the given <code>Pane</code> and returns its internal state and …\nDrops the given <code>Pane</code> into the provided <code>Target</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the <code>Internal</code> state of a <code>PaneGrid</code> from a …\nReturns the internal state of the given <code>Pane</code>, if it exists.\nReturns the internal state of the given <code>Pane</code> with …\nThe internal state of the <code>PaneGrid</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the amount of panes in the <code>State</code> is 0.\nReturns an iterator over all the panes of the <code>State</code>, …\nReturns a mutable iterator over all the panes of the <code>State</code>,\nReturns the layout of the <code>State</code>.\nThe layout <code>Node</code> of the <code>Internal</code> state\nReturns the total amount of panes in the <code>State</code>.\nMaximize the given <code>Pane</code>. Only this pane will be rendered …\nReturns the maximized <code>Pane</code> of the <code>PaneGrid</code>.\nMove <code>Pane</code> to an <code>Edge</code> of the <code>PaneGrid</code>.\nCreates a new <code>State</code>, initializing the first pane with the …\nThe panes of the <code>PaneGrid</code>.\nReturns the current <code>Pane</code> that is being dragged, if any.\nReturns the current <code>Split</code> that is being dragged, if any.\nResizes two panes by setting the position of the provided …\nRestore the currently maximized <code>Pane</code> to it’s normal …\nSplits the given <code>Pane</code> into two in the given <code>Axis</code> and …\nSplit a target <code>Pane</code> with a given <code>Pane</code> on a given <code>Region</code>.\nSwaps the position of the provided panes in the <code>State</code>.\nCreates a new <code>State</code> with the given <code>Configuration</code>.\nThe <code>Axis</code> of the <code>Split</code>.\nThe starting <code>Point</code> of the drag interaction.\nThe <code>Pane</code> being dragged.\nThe <code>Split</code> being dragged.\nThe <code>PickList</code> can be interacted with.\nDisplays an arrow icon (▼).\nThe theme catalog of a <code>PickList</code>.\nThe item class of the <code>Catalog</code>.\nA custom dynamic handle.\nThe handle to the right side of the <code>PickList</code>.\nThe <code>PickList</code> is being hovered.\nThe icon of a <code>Handle</code>.\nNo handle will be shown.\nThe <code>PickList</code> is open.\nA widget for selecting a single value from a list of …\nA custom static handle.\nThe possible status of a <code>PickList</code>.\nThe appearance of a pick list.\nA styling function for a <code>PickList</code>.\nThe <code>Background</code> of the pick list.\nThe <code>Border</code> of the pick list.\nThe unicode code point that will be used as the icon.\nThe default style of the field of a <code>PickList</code>.\nThe default class produced by the <code>Catalog</code>.\nThe default class for the menu of the <code>PickList</code>.\nSets the font of the <code>PickList</code>.\nFont that will be used to display the <code>code_point</code>,\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>Handle</code> of the <code>PickList</code>.\nThe handle <code>Color</code> of the pick list.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLine height of the content.\nSets the style of the <code>Menu</code>.\nCreates a new <code>PickList</code> with the given list of options, the …\nSets the message that will be produced when the <code>PickList</code> …\nSets the message that will be produced when the <code>PickList</code> …\nSets the <code>Padding</code> of the <code>PickList</code>.\nSets the placeholder of the <code>PickList</code>.\nThe placeholder <code>Color</code> of the pick list.\nThe shaping strategy of the icon.\nFont size of the content.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>PickList</code>.\nThe text <code>Color</code> of the pick list.\nSets the text <code>text::LineHeight</code> of the <code>PickList</code>.\nSets the <code>text::Shaping</code> strategy of the <code>PickList</code>.\nSets the text size of the <code>PickList</code>.\nSets the width of the <code>PickList</code>.\nThe <code>Icon</code> used when <code>PickList</code> is closed.\nThe <code>Icon</code> used when <code>PickList</code> is open.\nFont size of the content.\nThe theme catalog of a <code>ProgressBar</code>.\nThe item class of the <code>Catalog</code>.\nThe default height of a <code>ProgressBar</code>.\nA bar that displays progress.\nThe appearance of a progress bar.\nA styling function for a <code>ProgressBar</code>.\nThe <code>Background</code> of the progress bar.\nThe <code>Background</code> of the bar of the progress bar.\nThe <code>Border</code> of the progress bar.\nThe danger style of a <code>ProgressBar</code>.\nThe default class produced by the <code>Catalog</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the height of the <code>ProgressBar</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ProgressBar</code>.\nThe primary style of a <code>ProgressBar</code>.\nThe secondary style of a <code>ProgressBar</code>.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>ProgressBar</code>.\nThe success style of a <code>ProgressBar</code>.\nSets the width of the <code>ProgressBar</code>.\nThe <code>Radio</code> button can be interacted with.\nThe theme catalog of a <code>Radio</code>.\nThe item class of the <code>Catalog</code>.\nThe default size of a <code>Radio</code> button.\nThe default spacing of a <code>Radio</code> button.\nThe <code>Radio</code> button is being hovered.\nA circular button representing a choice.\nThe possible status of a <code>Radio</code> button.\nThe appearance of a radio button.\nA styling function for a <code>Radio</code>.\nThe <code>Background</code> of the radio button.\nThe border <code>Color</code> of the radio button.\nThe border width of the radio button.\nThe default style of a <code>Radio</code> button.\nThe default class produced by the <code>Catalog</code>.\nThe <code>Color</code> of the dot of the radio button.\nSets the text font of the <code>Radio</code> button.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Radio</code> button.\nSets the size of the <code>Radio</code> button.\nSets the spacing between the <code>Radio</code> button and the text.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>Radio</code> button.\nThe text <code>Color</code> of the radio button.\nSets the text <code>text::LineHeight</code> of the <code>Radio</code> button.\nSets the <code>text::Shaping</code> strategy of the <code>Radio</code> button.\nSets the text size of the <code>Radio</code> button.\nSets the <code>text::Wrapping</code> strategy of the <code>Radio</code> button.\nSets the width of the <code>Radio</code> button.\nIndicates whether the <code>Radio</code> button is currently selected.\nIndicates whether the <code>Radio</code> button is currently selected.\nDifferent offset on each end of the rule, length units. …\nThe theme catalog of a <code>Rule</code>.\nThe item class of the <code>Catalog</code>.\nThe fill mode of a rule.\nFill the whole length of the container.\nUniform offset from each end, length units.\nFill a percent of the length of the container. The rule …\nDisplay a horizontal or vertical rule for dividing content.\nThe appearance of a rule.\nA styling function for a <code>Rule</code>.\nThe color of the rule.\nThe default styling of a <code>Rule</code>.\nThe default class produced by the <code>Catalog</code>.\nReturn the starting offset and length of the rule.\nThe <code>FillMode</code> of the rule.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a horizontal <code>Rule</code> with the given height.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe radius of the line corners.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>Rule</code>.\nCreates a vertical <code>Rule</code> with the given width.\nThe width (thickness) of the rule line.\nThe amount of absolute offset in each direction of a …\nThe <code>Scrollable</code> can be interacted with.\nThe anchor of the scroller of the <code>Scrollable</code> relative to …\nBoth vertical and horizontal scrolling\nThe theme catalog of a <code>Scrollable</code>.\nThe item class of the <code>Catalog</code>.\nThe direction of <code>Scrollable</code>.\nThe <code>Scrollable</code> is being dragged.\nA relative offset that points to the bottom-right of a …\nContent is aligned to the end of the <code>Viewport</code>.\nHorizontal scrolling\nThe <code>Scrollable</code> is being hovered.\nThe identifier of a <code>Scrollable</code>.\nThe appearance of the scrollbar of a scrollable.\nThe amount of relative offset in each direction of a …\nA relative offset that points to the top-left of a …\nA widget that can vertically display an infinite amount of …\nA scrollbar within a <code>Scrollable</code>.\nThe appearance of the scroller of a scrollable.\nScroller is anchoer to the start of the <code>Viewport</code>.\nThe possible status of a <code>Scrollable</code>.\nThe appearance of a scrollable.\nA styling function for a <code>Scrollable</code>.\nVertical scrolling\nThe current <code>Viewport</code> of the <code>Scrollable</code>.\nReturns the <code>AbsoluteOffset</code> of the current <code>Viewport</code>.\nReturns the <code>AbsoluteOffset</code> of the current <code>Viewport</code>, but …\nSets the <code>Anchor</code> of the <code>Scrollbar</code> .\nAnchors the vertical <code>Scrollable</code> direction to the bottom.\nAnchors the horizontal <code>Scrollable</code> direction to the left.\nAnchors the horizontal <code>Scrollable</code> direction to the right.\nAnchors the vertical <code>Scrollable</code> direction to the top.\nSets the <code>Anchor</code> of the horizontal direction of the …\nSets the <code>Anchor</code> of the vertical direction of the <code>Scrollable</code>…\nThe <code>Background</code> of a scrollbar.\nThe <code>Border</code> of a scrollbar.\nThe <code>Border</code> of the scroller.\nReturns the bounds of the current <code>Viewport</code>.\nThe <code>Color</code> of the scroller.\nThe <code>container::Style</code> of a scrollable.\nReturns the content bounds of the current <code>Viewport</code>.\nThe default style of a <code>Scrollable</code>.\nThe default class produced by the <code>Catalog</code>.\nCreates a new <code>Scrollable</code> with the given <code>Direction</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe <code>Background</code> of the gap between a horizontal and …\nSets the height of the <code>Scrollable</code>.\nReturns the horizontal <code>Scrollbar</code>, if any.\nThe horizontal <code>Rail</code> appearance.\nSets the <code>Id</code> of the <code>Scrollable</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the scrollbar margin of the <code>Scrollbar</code> .\nCreates a new vertical <code>Scrollable</code>.\nCreates new <code>Scrollbar</code> for use in a <code>Scrollable</code>.\nCreates a custom <code>Id</code>.\nSets a function to call when the <code>Scrollable</code> is scrolled.\nReturns the <code>RelativeOffset</code> of the current <code>Viewport</code>.\nProduces a <code>Task</code> that scrolls the <code>Scrollable</code> with the given …\nProduces a <code>Task</code> that scrolls the <code>Scrollable</code> with the given …\nThe appearance of the <code>Scroller</code> of a scrollbar.\nSets the scroller width of the <code>Scrollbar</code> .\nProduces a <code>Task</code> that snaps the <code>Scrollable</code> with the given <code>Id</code>\nEmbeds the <code>Scrollbar</code> into the <code>Scrollable</code>, instead of …\nSets whether the <code>Scrollbar</code> should be embedded in the …\nThe <code>Style</code> of a class with the given status.\nSets the style of this <code>Scrollable</code>.\nCreates a unique <code>Id</code>.\nReturns the vertical <code>Scrollbar</code>, if any.\nThe vertical <code>Rail</code> appearance.\nSets the width of the <code>Scrollable</code>.\nSets the scrollbar width of the <code>Scrollbar</code> .\nCreates a new vertical <code>Scrollable</code>.\nThe amount of horizontal offset\nThe amount of horizontal offset\nThe amount of vertical offset\nThe amount of vertical offset\nThe properties of the horizontal scrollbar.\nThe properties of the vertical scrollbar.\nIndicates if the horizontal scrollbar is being dragged.\nIndicates if the horizontal scrollbar is being hovered.\nIndicates if the vertical scrollbar is being dragged.\nIndicates if the vertical scrollbar is being hovered.\nA <code>Shader</code> event.\nA keyboard event.\nA mouse event.\nA set of methods which allows a <code>Primitive</code> to be rendered.\nThe type of primitive this <code>Program</code> can draw.\nThe state and logic of a <code>Shader</code> widget.\nA window requested a redraw.\nA widget which can render custom shaders with Iced’s <code>wgpu</code>…\nThe internal state of the <code>Program</code>.\nStores custom, user-provided types.\nA touch event.\nA viewing region for displaying computer graphics.\nDraws the <code>Primitive</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the data with type <code>T</code> if it exists …\nReturns a mutable reference to the data with type <code>T</code> if it …\nReturns <code>true</code> if <code>Storage</code> contains a type <code>T</code>.\nSet the <code>height</code> of the custom <code>Shader</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the logical size of the <code>Viewport</code>.\nReturns the current mouse interaction of the <code>Program</code>.\nReturns the current mouse interaction of the <code>Program</code>.\nCreate a new custom <code>Shader</code>.\nReturns the physical height of the <code>Viewport</code>.\nReturns the physical size of the <code>Viewport</code>.\nReturns the physical width of the <code>Viewport</code>.\nProcesses the <code>Primitive</code>, allowing for GPU buffer …\nReturns the projection transformation of the <code>Viewport</code>.\nRenders the <code>Primitive</code>.\nReturns the scale factor of the <code>Viewport</code>.\nInserts the data <code>T</code> in to <code>Storage</code>.\nUpdate the internal <code>State</code> of the <code>Program</code>. This can be used …\nUpdate the internal <code>State</code> of the <code>Program</code>. This can be used …\nSet the <code>width</code> of the custom <code>Shader</code>.\nCreates a new <code>Viewport</code> with the given physical dimensions …\nThe <code>Slider</code> can be interacted with.\nThe theme catalog of a <code>Slider</code>.\nA circular handle.\nThe item class of the <code>Catalog</code>.\nThe default height of a <code>Slider</code>.\nThe <code>Slider</code> is being dragged.\nThe appearance of the handle of a slider.\nThe shape of the handle of a slider.\nThe <code>Slider</code> is being hovered.\nThe appearance of a slider rail\nA rectangular shape.\nAn horizontal bar and a handle that selects a single value …\nThe possible status of a <code>Slider</code>.\nThe appearance of a slider.\nA styling function for a <code>Slider</code>.\nThe <code>Background</code> of the handle.\nThe backgrounds of the rail of the slider.\nThe border of the rail.\nThe border <code>Color</code> of the handle.\nThe border width of the handle.\nThe default style of a <code>Slider</code>.\nThe default class produced by the <code>Catalog</code>.\nSets the optional default value for the <code>Slider</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe appearance of the <code>Handle</code> of the slider.\nSets the height of the <code>Slider</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Slider</code>.\nSets the release message of the <code>Slider</code>. This is called …\nThe colors of the rail of the slider.\nThe shape of the handle.\nSets the optional “shift” step for the <code>Slider</code>.\nSets the step size of the <code>Slider</code>.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>Slider</code>.\nSets the width of the <code>Slider</code>.\nThe width of the stroke of a slider rail.\nChanges the <code>HandleShape</code> of the <code>Style</code> to a circle with the …\nThe border radius of the corners of the rectangle.\nThe radius of the circle.\nThe width of the rectangle.\nThe theme catalog of an <code>Svg</code>.\nThe item class of the <code>Catalog</code>.\nA handle of Svg data.\nThe <code>Svg</code> is being hovered.\nThe <code>Svg</code> is idle.\nThe possible status of an <code>Svg</code>.\nThe appearance of an <code>Svg</code>.\nA styling function for an <code>Svg</code>.\nA vector graphics image.\nThe <code>Color</code> filter of an <code>Svg</code>.\nSets the <code>ContentFit</code> of the <code>Svg</code>.\nReturns a reference to the SVG <code>Data</code>.\nThe default class produced by the <code>Catalog</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an SVG <code>Handle</code> from raw bytes containing either an …\nCreates a new <code>Svg</code> that will display the contents of the …\nCreates an SVG <code>Handle</code> pointing to the vector image of the …\nSets the height of the <code>Svg</code>.\nReturns the unique identifier of the <code>Handle</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Svg</code> from the given <code>Handle</code>.\nSets the opacity of the <code>Svg</code>.\nApplies the given <code>Rotation</code> to the <code>Svg</code>.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>Svg</code>.\nSets the width of the <code>Svg</code>.\nAn absolute height in logical pixels.\nAdvanced text shaping and font fallback.\nNo shaping and no font fallback.\nBorrowed data.\nThe theme catalog of a <code>Text</code>.\nThe item class of this <code>Catalog</code>.\nA fragment of <code>Text</code>.\nWraps at the glyph level.\nThe output of the <code>Highlighter</code>.\nA type capable of highlighting text.\nA trait for converting a value to some text <code>Fragment</code>.\nThe highlight iterator type.\nThe height of a line of text in a paragraph.\nNo wrapping.\nOwned data.\nA factor of the size of the text.\nA bunch of <code>Rich</code> text.\nThe settings to configure the <code>Highlighter</code>.\nThe shaping strategy of some text.\nA span of text.\nThe internal state of a <code>Text</code> widget.\nThe appearance of some text.\nA styling function for a <code>Text</code>.\nA bunch of text.\nWraps at the word level.\nWraps at the word level, or fallback to glyph level if a …\nThe wrapping strategy of some text.\nSets the <code>alignment::Horizontal</code> of the <code>Rich</code> text.\nSets the <code>alignment::Vertical</code> of the <code>Rich</code> text.\nSets the <code>Background</code> of the <code>Span</code>.\nSets the <code>Background</code> of the <code>Span</code>, if any.\nText with the default base color.\nSets the <code>Border</code> of the <code>Span</code>.\nSets the <code>Border</code> of the <code>Span</code>, if any.\nCenters the <code>Rich</code> text, both horizontally and vertically.\nNotifies the <code>Highlighter</code> that the line at the given index …\nSets the default <code>Color</code> of the <code>Rich</code> text.\nSets the <code>Color</code> of the <code>Span</code>.\nThe <code>Color</code> of the <code>Span</code>.\nThe <code>Color</code> of the text.\nSets the default <code>Color</code> of the <code>Rich</code> text, if <code>Some</code>.\nSets the <code>Color</code> of the <code>Span</code>, if any.\nReturns the current line of the <code>Highlighter</code>.\nText conveying some negative information, like an error.\nThe default text styling; color is inherited.\nThe default class produced by this <code>Catalog</code>.\nDraws text using the same logic as the <code>Text</code> widget.\nSets the default font of the <code>Rich</code> text.\nSets the font of the <code>Span</code>.\nThe font of the <code>Span</code>.\nSets the font of the <code>Span</code>, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the height of the <code>Rich</code> text boundaries.\nThe <code>Highlight</code> of the <code>Span</code>.\nHighlights the given line.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the value to some text <code>Fragment</code>.\nProduces the <code>layout::Node</code> of a <code>Text</code> widget.\nSets the defualt <code>LineHeight</code> of the <code>Rich</code> text.\nSets the <code>LineHeight</code> of the <code>Span</code>.\nThe <code>LineHeight</code> of the <code>Span</code>.\nSets the link of the <code>Span</code>.\nThe link of the <code>Span</code>.\nSets the link of the <code>Span</code>, if any.\nCreates a new <code>Highlighter</code> from its <code>Self::Settings</code>.\nCreates a new empty <code>Rich</code> text.\nCreates a new <code>Span</code> of text with the given text fragment.\nSets the <code>Padding</code> of the <code>Span</code>.\nThe <code>Padding</code> of the <code>Span</code>.\nText conveying some important information, like an action.\nText conveying some secondary information, like a footnote.\nSets the default size of the <code>Rich</code> text.\nSets the size of the <code>Span</code>.\nThe size of the <code>Span</code> in <code>Pixels</code>.\nSets whether the <code>Span</code> shoud be struck through or not.\nWhether the <code>Span</code> should be struck through or not.\nThe <code>Style</code> of a class with the given status.\nSets the default style of the <code>Rich</code> text.\nText conveying some positive information, like a …\nThe <code>Fragment</code> of text.\nReturns the <code>LineHeight</code> in absolute logical pixels.\nTurns the <code>Span</code> into a static one.\nSets whether the <code>Span</code> shoud be underlined or not.\nWhether the <code>Span</code> should be underlined or not.\nUpdates the <code>Highlighter</code> with some new <code>Self::Settings</code>.\nSets the width of the <code>Rich</code> text boundaries.\nCreates a new <code>Rich</code> text with the given text spans.\nSets the <code>Wrapping</code> strategy of the <code>Rich</code> text.\nAn interaction with an <code>Editor</code>.\nThe <code>TextEditor</code> can be interacted with.\nDelete the previous character.\nDelete the previous character.\nA binding to an action in the <code>TextEditor</code>.\nThe theme catalog of a <code>TextEditor</code>.\nThe item class of the <code>Catalog</code>.\nClick the <code>Editor</code> at the given <code>Point</code>.\nThe content of a <code>TextEditor</code>.\nCopy the selection of the <code>TextEditor</code>.\nProduce the given message.\nCut the selection of the <code>TextEditor</code>.\nDelete the next character.\nDelete the next character.\nThe <code>TextEditor</code> cannot be interacted with.\nMove to the end of the text.\nMove to the start of the text.\nMove down.\nDrag the mouse on the <code>Editor</code> to the given <code>Point</code>.\nAn action that edits text.\nPerform an <code>Edit</code>.\nMove to the end of the line.\nBreak the current line.\nBreak the current line.\nThe <code>TextEditor</code> is focused.\nMove to the start of the line.\nThe <code>TextEditor</code> is being hovered.\nInsert the given character.\nInsert the given character.\nA key press.\nMove left.\nA cursor movement.\nApply a <code>Motion</code>.\nApply a <code>Motion</code>.\nMove to the start of the next window.\nMove to the start of the previous window.\nPaste the given text.\nPaste the clipboard contents in the <code>TextEditor</code>.\nMove right.\nScroll the <code>Editor</code> a certain amount of lines.\nSelect text with a given <code>Motion</code>.\nSelect text with a given <code>Motion</code>.\nSelect the entire buffer.\nSelect the entire buffer.\nSelect the line at the current cursor.\nSelect the line at the current cursor.\nSelect the word at the current cursor.\nSelect the word at the current cursor.\nA sequence of bindings to execute.\nThe state of a <code>TextEditor</code>.\nThe possible status of a <code>TextEditor</code>.\nThe appearance of a text input.\nA styling function for a <code>TextEditor</code>.\nA multi-line text input.\nUnfocus the <code>TextEditor</code>.\nMove up.\nMove to the left boundary of a word.\nMove to the right boundary of a word.\nThe <code>Background</code> of the text input.\nThe <code>Border</code> of the text input.\nReturns the current cursor position of the <code>Content</code>.\nThe default style of a <code>TextEditor</code>.\nThe default class produced by the <code>Catalog</code>.\nReturns the <code>Direction</code> of the <code>Motion</code>.\nSets the <code>Font</code> of the <code>TextEditor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the default <code>Binding</code> for the given key press.\nSets the height of the <code>TextEditor</code>.\nHighlights the <code>TextEditor</code> with the given <code>Highlighter</code> and a …\nThe <code>Color</code> of the icon of the text input.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the <code>Action</code> is an editing action.\nReturns whether the <code>TextEditor</code> is currently focused or not.\nThe key pressed.\nSets the closure to produce key bindings on key presses.\nReturns the text of the line at the given index, if it …\nReturns the amount of lines of the <code>Content</code>.\nSets the <code>text::LineHeight</code> of the <code>TextEditor</code>.\nReturns an iterator of the text of the lines in the <code>Content</code>…\nThe state of the keyboard modifiers.\nCreates new <code>TextEditor</code> with the given <code>Content</code>.\nCreates an empty <code>Content</code>.\nSets the message that should be produced when some action …\nSets the <code>Padding</code> of the <code>TextEditor</code>.\nPerforms an <code>Action</code> on the <code>Content</code>.\nSets the placeholder of the <code>TextEditor</code>.\nThe <code>Color</code> of the placeholder of the text input.\nReturns the selected text of the <code>Content</code>.\nThe <code>Color</code> of the selection of the text input.\nSets the text size of the <code>TextEditor</code>.\nThe current <code>Status</code> of the <code>TextEditor</code>.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>TextEditor</code>.\nReturns the text of the <code>Content</code>.\nThe text produced by the key press.\nThe <code>Color</code> of the value of the text input.\nWidens the <code>Motion</code>, if possible.\nSets the width of the <code>TextEditor</code>.\nCreates a <code>Content</code> with the given text.\nSets the <code>Wrapping</code> strategy of the <code>TextEditor</code>.\nThe amount of lines to scroll.\nThe <code>TextInput</code> can be interacted with.\nThe theme catalog of a <code>TextInput</code>.\nThe item class of the <code>Catalog</code>.\nThe default <code>Padding</code> of a <code>TextInput</code>.\nThe <code>TextInput</code> cannot be interacted with.\nThe <code>TextInput</code> is focused.\nThe <code>TextInput</code> is being hovered.\nThe content of the <code>Icon</code>.\nThe identifier of a <code>TextInput</code>.\nThe left side of a <code>TextInput</code>.\nThe right side of a <code>TextInput</code>.\nThe side of a <code>TextInput</code>.\nThe state of a <code>TextInput</code>.\nThe possible status of a <code>TextInput</code>.\nThe appearance of a text input.\nA styling function for a <code>TextInput</code>.\nA field that can be filled with text.\nThe value of a <code>TextInput</code>.\nSets the horizontal alignment of the <code>TextInput</code>.\nThe <code>Background</code> of the text input.\nThe <code>Border</code> of the text input.\nSets the style class of the <code>TextInput</code>.\nThe unicode code point that will be used as the icon.\nTrack the cursor of a text input.\nReturns the <code>Cursor</code> of the <code>TextInput</code>.\nThe default style of a <code>TextInput</code>.\nThe default class produced by the <code>Catalog</code>.\nDraws the <code>TextInput</code> with the given <code>Renderer</code>, overriding its\nProduces a <code>Task</code> that focuses the <code>TextInput</code> with the given …\nFocuses the <code>TextInput</code>.\nSets the <code>Font</code> of the <code>TextInput</code>.\nThe font that will be used to display the <code>code_point</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>Icon</code> of the <code>TextInput</code>.\nThe <code>Color</code> of the icon of the text input.\nSets the <code>Id</code> of the <code>TextInput</code>.\nInserts a new <code>char</code> at the given grapheme <code>index</code>.\nInserts a bunch of graphemes at the given grapheme <code>index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the <code>Value</code> is empty or not.\nReturns whether the <code>TextInput</code> is currently focused or not.\nLays out the <code>TextInput</code>, overriding its <code>Value</code> if provided.\nReturns the total amount of graphemes in the <code>Value</code>.\nSets the <code>text::LineHeight</code> of the <code>TextInput</code>.\nProduces a <code>Task</code> that moves the cursor of the <code>TextInput</code> …\nMoves the <code>Cursor</code> of the <code>TextInput</code> to an arbitrary location.\nProduces a <code>Task</code> that moves the cursor of the <code>TextInput</code> …\nMoves the <code>Cursor</code> of the <code>TextInput</code> to the end of the input …\nProduces a <code>Task</code> that moves the cursor of the <code>TextInput</code> …\nMoves the <code>Cursor</code> of the <code>TextInput</code> to the front of the …\nCreates a new <code>TextInput</code> with the given placeholder and its …\nCreates a new <code>Value</code> from a string slice.\nCreates a custom <code>Id</code>.\nCreates a new <code>State</code>, representing an unfocused <code>TextInput</code>.\nReturns the position of the next end of a word from the …\nSets the message that should be produced when some text is …\nSets the message that should be produced when some text is …\nSets the message that should be produced when some text is …\nSets the message that should be produced when some text is …\nSets the message that should be produced when the <code>TextInput</code>…\nSets the message that should be produced when the <code>TextInput</code>…\nSets the <code>Padding</code> of the <code>TextInput</code>.\nThe <code>Color</code> of the placeholder of the text input.\nReturns the position of the previous start of a word from …\nRemoves the grapheme at the given <code>index</code>.\nRemoves the graphemes from <code>start</code> to <code>end</code>.\nConverts the <code>TextInput</code> into a secure password input.\nReturns a new <code>Value</code> with all its graphemes replaced with …\nReturns a new <code>Value</code> containing the graphemes from <code>start</code> …\nProduces a <code>Task</code> that selects all the content of the …\nSelects all the content of the <code>TextInput</code>.\nThe <code>Color</code> of the selection of the text input.\nThe side of a <code>TextInput</code> where to display the <code>Icon</code>.\nSets the text size of the <code>TextInput</code>.\nThe font size of the content.\nThe spacing between the <code>Icon</code> and the text in a <code>TextInput</code>.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>TextInput</code>.\nUnfocuses the <code>TextInput</code>.\nCreates a unique <code>Id</code>.\nReturns a new <code>Value</code> containing the graphemes until the …\nThe <code>Color</code> of the value of the text input.\nSets the width of the <code>TextInput</code>.\nThe cursor of a text input.\nCursor without a selection\nCursor selecting a range of text\nThe state of a <code>Cursor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current selection of the <code>Cursor</code> for the given …\nReturns the <code>State</code> of the <code>Cursor</code>.\nThe end of the selection\nThe start of the selection\nThe built-in Catppuccin Frappé variant of a <code>Palette</code>.\nThe built-in Catppuccin Latte variant of a <code>Palette</code>.\nThe built-in Catppuccin Macchiato variant of a <code>Palette</code>.\nThe built-in Catppuccin Mocha variant of a <code>Palette</code>.\nThe built-in Catppuccin Frappé variant.\nThe built-in Catppuccin Latte variant.\nThe built-in Catppuccin Macchiato variant.\nThe built-in Catppuccin Mocha variant.\nA <code>Theme</code> with a customized <code>Palette</code>.\nA <code>Theme</code> that uses a <code>Custom</code> palette.\nThe built-in dark variant of a <code>Palette</code>.\nThe built-in Dracula variant of a <code>Palette</code>.\nThe built-in dark variant.\nThe built-in Dracula variant.\nThe built-in Ferra variant of a <code>Palette</code>.\nThe built-in Ferra variant:\nThe built-in Gruvbox Dark variant of a <code>Palette</code>.\nThe built-in Gruvbox Light variant of a <code>Palette</code>.\nThe built-in Gruvbox Dark variant.\nThe built-in Gruvbox Light variant.\nThe built-in Kanagawa Dragon variant of a <code>Palette</code>.\nThe built-in Kanagawa Lotus variant of a <code>Palette</code>.\nThe built-in Kanagawa Wave variant of a <code>Palette</code>.\nThe built-in Kanagawa Dragon variant.\nThe built-in Kanagawa Lotus variant.\nThe built-in Kanagawa Wave variant.\nThe built-in light variant of a <code>Palette</code>.\nThe built-in light variant.\nThe built-in Moonfly variant of a <code>Palette</code>.\nThe built-in Moonfly variant.\nThe built-in Nightfly variant of a <code>Palette</code>.\nThe built-in Nord variant of a <code>Palette</code>.\nThe built-in Nightfly variant.\nThe built-in Nord variant.\nThe built-in Oxocarbon variant of a <code>Palette</code>.\nThe built-in Oxocarbon variant.\nA color palette.\nThe built-in Solarized Dark variant of a <code>Palette</code>.\nThe built-in Solarized Light variant of a <code>Palette</code>.\nThe built-in Solarized Dark variant.\nThe built-in Solarized Light variant.\nThe built-in Tokyo Night variant of a <code>Palette</code>.\nThe built-in Tokyo Night Light variant of a <code>Palette</code>.\nThe built-in Tokyo Night Storm variant of a <code>Palette</code>.\nA built-in theme.\nThe built-in Tokyo Night variant.\nThe built-in Tokyo Night Light variant.\nThe built-in Tokyo Night Storm variant.\nThe background <code>Color</code> of the <code>Palette</code>.\nThe danger <code>Color</code> of the <code>Palette</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>Custom</code> theme from the given <code>Palette</code>.\nDefine the colors of a theme.\nThe primary <code>Color</code> of the <code>Palette</code>.\nThe success <code>Color</code> of the <code>Palette</code>.\nThe text <code>Color</code> of the <code>Palette</code>.\nCreates a <code>Custom</code> theme from the given <code>Palette</code> with a …\nA set of background colors.\nA set of danger colors.\nThe built-in Catppuccin Frappé variant of an <code>Extended</code> …\nThe built-in Catppuccin Latte variant of an <code>Extended</code> …\nThe built-in Catppuccin Macchiato variant of an <code>Extended</code> …\nThe built-in Catppuccin Mocha variant of an <code>Extended</code> …\nThe built-in dark variant of an <code>Extended</code> palette.\nThe built-in Dracula variant of an <code>Extended</code> palette.\nThe built-in Ferra variant of an <code>Extended</code> palette.\nThe built-in Gruvbox Dark variant of an <code>Extended</code> palette.\nThe built-in Gruvbox Light variant of an <code>Extended</code> palette.\nThe built-in Kanagawa Dragon variant of an <code>Extended</code> …\nThe built-in Kanagawa Lotus variant of an <code>Extended</code> palette.\nThe built-in Kanagawa Wave variant of an <code>Extended</code> palette.\nThe built-in light variant of an <code>Extended</code> palette.\nThe built-in Moonfly variant of an <code>Extended</code> palette.\nThe built-in Nightfly variant of an <code>Extended</code> palette.\nThe built-in Nord variant of an <code>Extended</code> palette.\nThe built-in Oxocarbon variant of an <code>Extended</code> palette.\nThe built-in Solarized Dark variant of an <code>Extended</code> palette.\nThe built-in Solarized Light variant of an <code>Extended</code> …\nThe built-in Tokyo Night variant of an <code>Extended</code> palette.\nThe built-in Tokyo Night variant of an <code>Extended</code> palette.\nThe built-in Tokyo Night Storm variant of an <code>Extended</code> …\nAn extended set of colors generated from a <code>Palette</code>.\nA pair of background and text colors.\nA color palette.\nA set of primary colors.\nA set of secondary colors.\nA set of success colors.\nThe background <code>Color</code> of the <code>Palette</code>.\nThe set of background colors.\nThe base background color.\nThe base primary color.\nThe base secondary color.\nThe base success color.\nThe base danger color.\nThe background color.\nThe danger <code>Color</code> of the <code>Palette</code>.\nThe set of danger colors.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates an <code>Extended</code> palette from a simple <code>Palette</code>.\nGenerates a set of <code>Primary</code> colors from the base, …\nGenerates a set of <code>Secondary</code> colors from the base and text …\nGenerates a set of <code>Success</code> colors from the base, …\nGenerates a set of <code>Danger</code> colors from the base, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the palette is dark or not.\nCreates a new <code>Pair</code> from a background <code>Color</code> and some text …\nGenerates a set of <code>Background</code> colors from the base and …\nThe primary <code>Color</code> of the <code>Palette</code>.\nThe set of primary colors.\nThe set of secondary colors.\nA stronger version of the base background color.\nA stronger version of the base primary color.\nA stronger version of the base secondary color.\nA stronger version of the base success color.\nA stronger version of the base danger color.\nThe success <code>Color</code> of the <code>Palette</code>.\nThe set of success colors.\nThe text <code>Color</code> of the <code>Palette</code>.\nThe text color.\nA weaker version of the base background color.\nA weaker version of the base primary color.\nA weaker version of the base secondary color.\nA weaker version of the base success color.\nA weaker version of the base danger color.\nThe <code>Toggler</code> can be interacted with.\nThe theme catalog of a <code>Toggler</code>.\nThe item class of the <code>Catalog</code>.\nThe default size of a <code>Toggler</code>.\nThe <code>Toggler</code> is disabled.\nThe <code>Toggler</code> is being hovered.\nThe possible status of a <code>Toggler</code>.\nThe appearance of a toggler.\nA styling function for a <code>Toggler</code>.\nA toggler widget.\nThe background <code>Color</code> of the toggler.\nThe <code>Color</code> of the background border of the toggler.\nThe width of the background border of the toggler.\nThe default style of a <code>Toggler</code>.\nThe default class produced by the <code>Catalog</code>.\nSets the <code>Renderer::Font</code> of the text of the <code>Toggler</code>\nThe foreground <code>Color</code> of the toggler.\nThe <code>Color</code> of the foreground border of the toggler.\nThe width of the foreground border of the toggler.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the label of the <code>Toggler</code>.\nCreates a new <code>Toggler</code>.\nSets the message that should be produced when a user …\nSets the message that should be produced when a user …\nSets the size of the <code>Toggler</code>.\nSets the spacing between the <code>Toggler</code> and the text.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>Toggler</code>.\nSets the horizontal alignment of the text of the <code>Toggler</code>\nSets the text <code>text::LineHeight</code> of the <code>Toggler</code>.\nSets the <code>text::Shaping</code> strategy of the <code>Toggler</code>.\nSets the text size o the <code>Toggler</code>.\nSets the <code>text::Wrapping</code> strategy of the <code>Toggler</code>.\nSets the width of the <code>Toggler</code>.\nIndicates whether the <code>Toggler</code> is toggled.\nIndicates whether the <code>Toggler</code> is toggled.\nThe tooltip will appear on the bottom of the widget.\nThe tooltip will follow the cursor.\nThe tooltip will appear on the left of the widget.\nThe position of the tooltip. Defaults to following the …\nThe tooltip will appear on the right of the widget.\nAn element to display a widget over another.\nThe tooltip will appear on the top of the widget.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the gap between the content and its <code>Tooltip</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Tooltip</code>.\nSets the padding of the <code>Tooltip</code>.\nSets whether the <code>Tooltip</code> is snapped within the viewport.\nSets the style of the <code>Tooltip</code>.\nThe default width of a <code>VerticalSlider</code>.\nAn vertical bar and a handle that selects a single value …\nSets the optional default value for the <code>VerticalSlider</code>.\nReturns the argument unchanged.\nSets the height of the <code>VerticalSlider</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>VerticalSlider</code>.\nSets the release message of the <code>VerticalSlider</code>. This is …\nSets the optional “shift” step for the <code>VerticalSlider</code>.\nSets the step size of the <code>VerticalSlider</code>.\nSets the style of the <code>VerticalSlider</code>.\nSets the width of the <code>VerticalSlider</code>.")