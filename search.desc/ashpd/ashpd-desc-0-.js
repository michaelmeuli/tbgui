searchState.loadedDescShard("ashpd", 0, "ASHPD\nA token that can be used to activate an application.\nThe application ID.\nRequest cancelled.\nContains the error value\nThe error type for ashpd.\nExists already.\nRequest failed.\nA file name represented as a nul-terminated byte array.\nInput/Output\nInvalid AppId\nInvalid arguments passed.\nA signal returned no response.\nMethod not allowed to be called.\nNot found.\nAn error indicating that an interior nul byte was found\nContains the success value\nFailed to parse a string into an enum variant\nProcess ID.\nSomething Failed on the portal request.\nAn error type that describes the various DBus errors.\nReturned when the portal wasn’t found. Either the user …\nRequires a newer interface version.\nThe portal request didn’t succeed.\nAlias for a <code>Result</code> with the error type <code>ashpd::Error</code>.\nAn error indicating that a Icon::Bytes was expected but …\nWindow destroyed.\nMost portals interact with the user by showing dialogs.\nZBus specific error.\nA zbus::fdo specific error.\nInteract with the user’s desktop such as taking a …\nInteract with the documents store or transfer files across …\nSpawn commands outside the sandbox or monitor if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an instance of <code>WindowIdentifier</code> from a …\nCreate an instance of <code>ActivationToken</code> from a Wayland …\nCreate an instance of <code>WindowIdentifier</code> from a Wayland …\nCreate an instance of <code>ActivationToken</code> from a Wayland …\nCreate an instance of <code>WindowIdentifier</code> from a Wayland …\nCreate an instance of <code>WindowIdentifier</code> from an X11 window…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the application is running inside a sandbox.\nPersist while the application is running.\nIcon bytes.\nThe user canceled the request.\nThe user cancelled the interaction.\nA color as a RGB tuple.\nDo not persist.\nThe user cancelled the request or something else happened.\nPersist until explicitly revoked.\nA file descriptor.\nA representation of an icon.\nA list of icon names.\nSuccess, the request is carried out.\nSomething else happened.\nThe user interaction was ended in some other way.\nPersistence mode for a screencast or remote desktop …\nThe Request interface is shared by all portal interfaces.\nA typical response returned by the <code>Request::response</code>. of a …\nAn error returned a portal request caused by either the …\nPossible responses.\nShared by all portal interfaces that involve long lived …\nPortals that have a long-lived interaction\nSuccess, the request is carried out.\nAn icon URI.\nAccess to the current logged user information such as the …\nRequest to run in the background or started automatically …\nBlue.\nCheck if a camera is available, request access to it and …\nInteract with the clipboard.\nCloses the portal request to which this object refers and …\nCloses the portal session to which this object refers and …\nRequest access to specific devices such as camera, …\nInstall launchers like Web Application from your browser …\nCompose an email.\nOpen/save file(s) chooser. The interface lets sandboxed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEnable/disable/query the status of Game Mode.\nRegister global shortcuts Register global shortcuts\nGreen.\nInhibit the session from being restarted or the user from …\nCapture input events from physical or logical devices.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nQuery the user’s GPS location.\nMonitor memory level.\nCheck the status of the network on a user’s machine. <strong>Note</strong>…\nCreate a new instance of Color.\nSend/withdraw notifications.\nOpen a URI or a directory.\nCreates a new builder-pattern struct instance to construct …\nPower profile monitoring.\nPrint a document.\nProxy information. <strong>Note</strong> This portal doesn’t work for …\nSet threads to realtime.\nEmitted when a session is closed.\nRed.\nStart a remote desktop session and interact with it.\nThe corresponding response if the request was successful.\nStart a screencast session and get the PipeWire remote of …\nTake a screenshot or pick a color.\nRetrieve a per-application secret used to encrypt …\nRead &amp; listen to system settings changes.\nMove a file to the trash.\nSet a wallpaper on lockscreen, background or both.\nCreate an icon from a list of names.\nThe response of a <code>UserInformationRequest</code> request.\nA builder-pattern type to construct <code>UserInformation</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUser identifier.\nSets a window identifier.\nUser image uri.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUser name.\nSets a user-visible reason for the request.\nCreates a new builder-pattern struct instance to construct …\nBuild the <code>UserInformation</code>.\nThe response of a <code>BackgroundRequest</code> request.\nThe interface lets sandboxed applications request that the …\nA builder-pattern type to construct <code>Background</code>.\nIf the application will be auto-started.\nSets whether to auto start the application or not.\nSpecifies the command line to execute. If this is not …\nSets whether the application is dbus activatable.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets a window identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>BackgroundProxy</code>.\nSets a user-visible reason for the request.\nCreates a new builder-pattern struct instance to construct …\nIf the application is allowed to run in the background.\nBuild the <code>Background</code>.\nSets the status of the application running in background.\nThe interface lets sandboxed applications access camera …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA boolean stating whether there is any cameras available.\nCreate a new instance of <code>Camera</code>.\nOpen a file descriptor to the PipeWire remote where the …\nRequest access to the camera and return a file descriptor …\nRequests an access to the camera.\nWrapper of the DBus interface: …\nThe details of a new clipboard selection.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA list of mime types the new clipboard has content for.\nCreate a new instance of <code>Clipboard</code>.\nNotifies the session that the clipboard selection has …\nSpecifications\nSpecifications\nSpecifications\nSpecifications\nSpecifications\nWhether the session is the owner of the clipboard …\nSpecifications\nA Camera.\nThe possible device to request access to.\nThe interface lets services ask if an application should …\nA microphone.\nSpeakers.\nAsks for access to a device.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>DeviceProxy</code>.\nA launcher that represents an application\nThe interface lets sandboxed applications install …\nThe icon format.\nJPEG.\nOptions to pass to <code>DynamicLauncherProxy::launch</code>\nThe icon of the launcher.\nThe type of the launcher.\nPNG.\nOptions to pass to <code>DynamicLauncherProxy::prepare_install</code>\nA response of <code>DynamicLauncherProxy::prepare_install</code>\nSVG.\nWrong type of <code>crate::desktop::Icon</code> was used.\nA launcher that represents a web application\nSets the token that can be used to activate the chosen …\nSpecifications\nSets whether the icon should be editable.\nSets whether the name should be editable.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe actual icon.\nThe user selected icon or a predefined one\nSpecifications\nSpecifications\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecifications\nSets the launcher type.\nSets whether the dialog should be a modal.\nThe user defined name or a predefined one\nCreate a new instance of <code>DynamicLauncherProxy</code>.\n<em>Note</em> Only <code>Icon::Bytes</code> is accepted.\n<em>Note</em> Only <code>Icon::Bytes</code> is accepted.\nThe icon size.\nSpecifications\nThe URL for a <code>LauncherType::WebApplication</code> otherwise it is …\nA token to pass to <code>DynamicLauncherProxy::install</code>\nThe icon type.\nSpecifications\nA builder-pattern type to compose an email.\nSets the token that can be used to activate the chosen …\nA different variant of <code>Self::attach</code>.\nSets the email address to send the email to.\nSets a list of email addresses to send the email to.\nAttaches a file to the email.\nSets a list of email addresses to BCC.\nSets the email body.\nSets a list of email addresses to CC.\nReturns the argument unchanged.\nSets a window identifier.\nCalls <code>U::from(self)</code>.\nSend the request.\nSets the email subject.\nPresents the user with a choice to select from or as a …\nA file filter, to limit the available file choices to a …\nA builder-pattern type to open a file.\nA builder-pattern type to save a file.\nA builder-pattern type to save multiple files.\nA response of <code>OpenFileRequest</code>, <code>SaveFileRequest</code> or …\nSets a user-visible string to the “accept” button.\nSets a user-visible string to the “accept” button.\nSets a user-visible string to the “accept” button.\nCreates a checkbox choice.\nAdds a choice.\nAdds a choice.\nAdds a choice.\nThe selected value of each choice as a tuple of (key, …\nAdds a list of choices.\nAdds a list of choices.\nAdds a list of choices.\nSets the absolute path of the file.\nSpecifies the default filter.\nSets the default filter.\nSpecifies the current folder path.\nSpecifies the current folder path.\nSets the current folder.\nSets the current file name.\nSets whether to select directories or not.\nSets a list of files to save.\nAdds a files filter.\nAdds a files filter.\nAdds a list of files filters.\nAdds a list of files filters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds a glob pattern to the file filter.\nThe choice’s unique id\nSets a window identifier.\nSets a window identifier.\nSets a window identifier.\nThe initially selected value.\nAdds a (key, value) as a choice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe label of the filter.\nThe user visible label of the choice.\nAdds a mime type to the file filter.\nList of mimetypes filters.\nSets whether the dialog should be a modal.\nSets whether the dialog should be a modal.\nSets whether the dialog should be a modal.\nSets whether to allow multiple files selection.\nCreate a new file filter\nCreates a new choice.\nStart an open file request.\nPairs of choices.\nList of glob patterns filters.\nStart a save file request.\nStart a save files request.\nSend the request.\nSend the request.\nSend the request.\nSets a title for the file chooser dialog.\nSets a title for the file chooser dialog.\nSets a title for the file chooser dialog.\nThe selected files uris.\nGameMode is active.\nThe interface lets sandboxed applications access GameMode …\nGameMode is inactive.\nGameMode is active and <code>pid</code> is registered.\nThe query failed inside GameMode.\nThe status of the game mode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>GameMode</code>.\nQuery the GameMode status for a process. If the caller is …\nQuery the GameMode status for a process.\nQuery the GameMode status for a process.\nRegister a game with GameMode and thus request GameMode to …\nRegister a game with GameMode.\nRegister a game with GameMode.\nUn-register a game from GameMode. if the call is …\nUn-register a game from GameMode.\nUn-register a game from GameMode.\nNotifies about a shortcut becoming active.\nA response to a <code>GlobalShortcuts::bind_shortcuts</code> request.\nNotifies that a shortcut is not active anymore.\nWrapper of the DBus interface: …\nA response to a <code>GlobalShortcuts::list_shortcuts</code> request.\nShortcut descriptor used to bind new shortcuts in …\nStruct that contains information about existing binded …\nIndicates that the information associated with some of the …\nBind the shortcuts.\nCreate a global shortcuts session.\nUser-readable text describing what the shortcut does.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nShortcut id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLists all shortcuts.\nConstruct new shortcut\nCreate a new instance of <code>GlobalShortcuts</code>.\nOptional information\nOptional information\nSets the preferred shortcut trigger, defined as described …\nSignal emitted when shortcut becomes active.\nSignal emitted when shortcut is not active anymore.\nSignal emitted when information associated with some of …\nSession that requested the shortcut.\nSession that requested the shortcut.\nSession that requested the shortcut.\nThe application-provided ID for the shortcut.\nThe application-provided ID for the shortcut.\nA list of shortcuts.\nA list of shortcuts.\nShortcuts that have been registered.\nThe timestamp, as seconds and microseconds since the Unix …\nThe timestamp, as seconds and microseconds since the Unix …\nUser-readable text describing how to trigger the shortcut …\nThe session is ending.\nIdle.\nThe actions to inhibit that can end the user’s session\nThe interface lets sandboxed applications inhibit the user …\nA response received when the <code>state_changed</code> signal is …\nLogout.\nThe user asked to end the session e.g logout.\nRunning.\nThe current state of the user’s session.\nSuspend.\nUser switch.\nCreates a monitoring session. While this session is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInhibits a session status changes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>InhibitProxy</code>.\nAcknowledges that the caller received the “state_changed…\nSignal emitted when the session state changes.\nWhether screensaver is active or not.\nThe session triggered the state change\nThe session state.\nIndicates that an input capturing session was activated.\ninformation about an activation barrier\nInput Barrier.\n<code>BarrierID</code> of the triggered barrier\nA barrier ID.\nSupported capabilities\nIndicates that an input capturing session was deactivated.\nIndicates that an input capturing session was disabled.\nWrapper of the DBus interface: …\nKeyboard\nPointer\nA region of a <code>Zones</code>.\nA response to <code>InputCapture::set_pointer_barriers</code>\nTouchscreen\nThe id of the triggered barrier could not be determined, …\nA response of <code>InputCapture::zones</code>.\nIndicates that zones available to this session changed.\nThe same activation_id number as in the corresponding “…\nA number that can be used to synchronize with the …\nThe barrier that was triggered or None, if the …\nConnect to EIS.\nCreate an input capture session.\nThe current cursor position in the same coordinate space …\nDisable input capturing.\nEnable input capturing.\nList of pointer barriers that have been denied\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe height\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>InputCapture</code>.\nCreate a new barrier.\nOptional information\nSignal emitted when input capture starts and input events …\nSignal emitted when input capture stopped and input events …\nSignal emitted when the application will no longer receive …\nSignal emitted when the set of zones available to this …\nA list of regions.\nRelease any ongoing input capture.\nSession that was disabled.\nSession that was deactivated.\nSession that was activated.\nSession that was deactivated.\nSet up zero or more pointer barriers.\nSupported capabilities.\nThe width.\nThe x offset.\nThe y offset.\nThe zone_set ID of the invalidated zone.\nA unique ID to be used in …\nA set of currently available input zones for this session.\nThe accuracy of the location.\nCity.\nCountry.\nThe exact location.\nThe response received on a <code>location_updated</code> signal.\nThe interface lets sandboxed applications query basic …\nNeighborhood.\nNone.\nStreet.\nThe accuracy, in meters.\nThe altitude, in meters.\nCreate a location session.\nThe location description.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe heading, in degrees, going clockwise. North 0, East …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe latitude, in degrees.\nThe longitude, in degrees.\nCreate a new instance of <code>LocationProxy</code>.\nSignal emitted when the user location is updated.\nThe associated session.\nThe speed, in meters per second.\nStart the location session. An application can only …\nThe timestamp when the location was retrieved.\nThe interface provides information about low system memory …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>MemoryMonitor</code>.\nSignal emitted when a particular low memory situation …\nThe host is behind a captive portal and cannot reach the …\nHost’s network activity\nThe host connected to a network, and can reach the full …\nThe host is connected to a network, but can’t reach the …\nThe host is not configured with a route to the internet.\nThe interface provides network status information to …\nThe network status, composed of the availability, metered …\nReturns whether the given hostname is believed to be …\nReturns more detailed information about the host’s …\nReturns more detailed information about the host’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the network is considered available.\nReturns whether the network is considered available. That …\nReturns whether the network is considered metered.\nReturns whether the network is considered metered. That …\nCreate a new instance of <code>NetworkMonitor</code>.\nEmitted when the network configuration changes.\nReturns the three values all at once.\nAn invoked action.\nRinging alarm.\nA notification button\nThe purpose of a button.\nAccept call.\nDecline call.\nDisable speakerphone.\nEnable speakerphone.\nHangup call.\nThe content of a notification.\nAmber alert broadcast.\nTest broadcast.\nExtreme danger broadcast.\nSevere danger broadcast.\nWays to display a notification.\nExtreme weather warning.\nEnable speakerphone.\nHide on lockscreen.\nHigh.\nInstant messaging apps message.\nInstant messaging reply with text.\nIncoming call.\nLow.\nLow battery.\nMissed call.\nNormal.\nA notification\nThe interface lets sandboxed applications send and …\nOngoing call.\nVendor specific.\nVendor specific.\nPersistent.\nThe notification priority\nShow as new.\nSystem custom alert.\nTransient.\nTray.\nUrgent.\nBrowser websites notifications.\nSends a notification.\nSets the notification body.\nAdds a new button to the notification.\nSets the notification category.\nSets the default action when the user clicks on the …\nSets a value to be sent in the <code>action_invoked</code> signal.\nSets the notification display hints.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets an icon to the notification.\nNotification ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSame as <code>Notification::body</code> but supports markup formatting.\nAction name.\nCreate a new notification.\nCreate a new notification button.\nCreate a new instance of <code>NotificationProxy</code>.\nThe parameters passed to the action.\nSets the notification priority.\nSets the button purpose.\nSignal emitted when a particular action is invoked.\nWithdraws a notification.\nSets the notification sound.\nSupported options by the notifications server.\nThe value to send with the action name when the button is …\nA builder-pattern type to open a directory.\nA builder-pattern type to open a file.\nSets the token that can be used to activate the chosen …\nSets the token that can be used to activate the chosen …\nWhether to always ask the user which application to use or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets a window identifier.\nSets a window identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSend the request.\nSend the request for a file.\nSend the request for a URI.\nWhether the file should be writeable or not.\nThe interface provides information about the user-selected …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether the power saver is enabled.\nCreate a new instance of <code>PowerProfileMonitor</code>.\nDraft quality.\nHigh quality.\nLandscape.\nLow quality.\nNormal quality.\nThe page orientation.\nSetup the printed pages.\nPortrait.\nA response to a <code>PrintProxy::prepare_print</code> request.\nThe interface lets sandboxed applications print.\nThe print quality.\nReverse landscape.\nReverse portrait.\nPrint settings to set in the print dialog.\nWhether to collate copies.\nWhether to collate copies.\nSets the default paper source.\nThe default paper source.\nSets the user visible name of the page setup.\nThe user-visible name of the page setup.\nSets the dithering to use.\nThe dithering to use, one of fine, none, coarse, lineart, …\nSets the duplex printing mode.\nDuplex printing mode, one of simplex, horizontal or …\nSets the finishings.\nThe finishings.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the page height.\nPaper height in millimeters.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the page bottom margin.\nBottom margin in millimeters.\nSets the page margin left.\nLeft margin in millimeters.\nSets the page right margin.\nRight margin in millimeters.\nSets the page top margin.\nTop margin in millimeters.\nSets the media type.\nA media type according to PWG 5101.1-2002\nSets the number of copies to print.\nThe number of copies to print.\nSets the name of the page setup.\nThe name of the page setup.\nCreate a new instance of <code>PrintProxy</code>.\nSets the number of pages per sheet.\nThe number of pages per sheet.\nSets the number up layout, one of lrtb, lrbt, rltb, rlbt, …\nOne of lrtb, lrbt, rltb, rlbt, tblr, tbrl, btlr, btrl.\nSets the orientation.\nSets the orientation.\nOne of landscape, portrait, reverse_landscape or …\nThe page orientation.\nSets the print-to-file base name.\nBasename to use for print-to-file.\nSets the output bin\nThe output bin.\nSets the print-to-file format, one of PS, PDF, SVG.\nFormat to use for print-to-file, one of PDF, PS, SVG\nSets the print-to-file output uri.\nThe uri used for print-to file.\nSets a list of page ranges, formatted like this: …\nA list of page ranges, formatted like this: 0-2,4,9-11.\nSets what pages to print, one of all, even or odd.\nWhat pages to print, one of all, even or odd.\nThe printed pages setup.\nSets the paper name.\nA paper name according to PWG 5101.1-2002\nSets the paper height.\nPaper height, in millimeters.\nSets the paper width.\nPaper width, in millimeters.\nSets the ppdname.\nthe PPD name. It’s the name to select a given driver.\nPresents a print dialog to the user and returns print …\nAsks to print a file. The file must be passed in the form …\nSets the resolution in lines per inch.\nThe resolution in lpi (lines per inch).\nSets what pages to print, one of all, selection, current …\nWhat pages to print, one of all, selection, current or …\nSets the print quality.\nPrint quality.\nSets the resolution, both resolution-x &amp; resolution-y.\nThe resolution, sets both resolution-x &amp; resolution-y\nSets the horizontal resolution in dpi.\nThe horizontal resolution in dpi.\nSets the vertical resolution in dpi.\nThe vertical resolution in dpi.\nSets whether to reverse the order of the printed pages.\nWhether to reverse the order of printed pages.\nSets the page scale in percent.\nThe scale in percent\nThe printing settings.\nA token to pass to the print request.\nSets whether to use color.\nWhether to use color.\nSets the page width.\nPaper width in millimeters.\nThe interface provides network proxy information to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLooks up which proxy to use to connect to <code>uri</code>.\nCreate a new instance of <code>ProxyResolver</code>.\nInterface for setting a thread to realtime from within the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>Realtime</code>.\nThe available axis.\nA bit flag for the available devices.\nHorizontal axis.\nThe keyboard key state.\nA keyboard.\nA mouse pointer.\nThe key is pressed.\nThe key is released..\nThe interface lets sandboxed applications create remote …\nA response to a <code>RemoteDesktop::select_devices</code> request.\nA touchscreen\nVertical axis.\nAvailable source types.\nConnect to EIS.\nCreate a remote desktop session. A remote desktop session …\nThe selected devices.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>RemoteDesktop</code>.\nNotify keyboard code.\nNotify keyboard symbol.\nNotify pointer axis. The axis movement from a “smooth …\nNotify pointer axis discrete.\nNotify pointer button. The pointer button is encoded …\nNotify about a new relative pointer motion event. The (dx, …\nNotify about a new absolute pointer motion event. The (x, …\nNotify about a new touch down event. The (x, y) position …\nNotify about a new touch motion event. The (x, y) position …\nNotify about a new touch up event.\nThe session restore token.\nSelect input devices to remote control.\nStart the remote desktop session.\nThe selected streams if a ScreenCast portal is used on the …\nA bit flag for the possible cursor modes.\nThe cursor is embedded as part of the stream buffers.\nDefines which portals session can be used in a screen-cast.\nThe cursor is not part of the screen cast stream.\nThe cursor is not part of the screen cast stream, but sent …\nA monitor.\nThe interface lets sandboxed applications create screen …\nA bit flag for the available sources to record.\nA PipeWire stream.\nA response to a <code>Screencast::start</code> request.\nVirtual\nA specific window\nAvailable cursor mode.\nAvailable source types.\nCreate a screen cast session.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe stream identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe stream mapping id.\nCreate a new instance of <code>Screencast</code>.\nOpen a file descriptor to the PipeWire remote where the …\nThe PipeWire stream Node ID\nA tuple consisting of the position (x, y) in the …\nThe session restore token.\nConfigure what the screen cast session should record. This …\nA tuple consisting of (width, height). The size represents …\nThe source type of the stream.\nStart the screen cast session.\nThe list of streams.\nA builder-pattern type to construct <code>Color</code>.\nThe response of a <code>ScreenshotRequest</code> request.\nA builder-pattern type to construct a screenshot <code>Screenshot</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets a window identifier.\nSets a window identifier.\nSets whether the dialog should offer customization before …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets whether the dialog should be a modal.\nCreates a new builder-pattern struct instance to construct …\nBuild the <code>Color</code>.\nBuild the <code>Screenshot</code>.\nThe screenshot URI.\nThe interface lets sandboxed applications retrieve a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>Secret</code>.\nA handy wrapper around <code>Secret::retrieve</code>.\nRetrieves a master secret for a sandboxed application.\nAccent color key\nAppearance namespace\nColor scheme key\nContrast key\nThe system’s preferred color scheme\nThe system’s preferred contrast level\nHigher contrast\nA HashMap of the &lt;key, value&gt; settings found on a specific …\nNo preference\nNo preference\nPrefers dark appearance\nPrefers light appearance\nA specific <code>namespace.key = value</code> setting.\nThe interface provides read-only access to a small number …\nRetrieves the system’s preferred accent color\nRetrieves the system’s preferred color scheme\nRetrieves the system’s preferred contrast level\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe setting key.\nThe setting namespace.\nCreate a new instance of <code>Settings</code>.\nReads a single value. Returns an error on any unknown …\nReads a single value. Returns an error on any unknown …\nListen to changes of the system’s accent color\nListen to changes of the system’s preferred color scheme\nListen to changes of the system’s contrast level\nSignal emitted when a setting changes.\nSimilar to Self::receive_setting_changed but allows you to …\nThe setting value.\nThe interface lets sandboxed applications send files to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>TrashProxy</code>.\nA handy wrapper around <code>TrashProxy::trash_file</code>.\nSends a file to the trashcan. Applications are allowed to …\nSet the wallpaper only on the background.\nSet the wallpaper on both lock-screen and background.\nSet the wallpaper only on the lock-screen.\nWhere to set the wallpaper on.\nA builder-pattern type to set the wallpaper.\nBuild using a file.\nBuild using a URI.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets a window identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets where to set the wallpaper on.\nWhether to show a preview of the picture. <strong>Note</strong> the portal …\nDepends on the application needs.\nDelete access.\nDocument flags\nThe ID of a file in the document store.\nThe interface lets sandboxed applications make files from …\nExport a directory.\nThe interface operates as a middle-man between apps when …\nThe possibility to grant new permissions to the file.\nThe possible permissions to grant to a specific …\nA <code>HashMap</code> mapping application IDs to the permissions for …\nPersistent file.\nRead access.\nReuse the existing document store entry for the file.\nWrite access.\nAdds a file to the document store. The file is passed in …\nAdds files to a session. This method can be called …\nAdds multiple files to the document store. The files are …\nCreates an entry in the document store for writing a new …\nAdds multiple files to the document store. The files are …\nRemoves an entry from the document store. The file itself …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGrants access permissions for a file in the document store …\nRetrieves the host filesystem paths from their document …\nGets the filesystem path and application permissions for a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLists documents in the document store for an application …\nLooks up the document ID for a file.\nReturns the path at which the document store fuse …\nCreate a new instance of <code>Documents</code>.\nCreate a new instance of <code>FileTransfer</code>.\nRetrieves files that were previously added to the session …\nRevokes access permissions for a file in the document …\nStarts a session for a file transfer. The caller should …\nEnds the transfer. Further calls to <code>add_files()</code> or …\nEmitted when the transfer is closed.\nAllow sandbox access to accessibility bus.\nClear the environment.\nClear the environment.\nThe Development interface lets any client, possibly in a …\nShare the display access (X11, Wayland) with the caller.\nDone.\nNo update to install.\nDon’t provide app files at <code>/app</code> in the new sandbox.\nExpose the sandbox pids in the callers sandbox, only …\nSupports the expose sandbox pids flag of Spawn.\nFailed.\nThe interface exposes some interactions with Flatpak on …\nShare the gpu access with the caller.\nFlags affecting the running of commands on the host\nSpawn the latest version of the app.\nSpawn without network (equivalent of the <code>unshare=network</code> …\nEmit a SpawnStarted signal once the sandboxed process has …\nRunning.\nSpawn in a sandbox (equivalent of the sandbox option of …\nA bitmask representing the “permissions” of a newly …\nAllow sandbox access to (filtered) session bus.\nExpose the sandbox process IDs in the caller’s sandbox …\nShare the sound access (PulseAudio) with the caller.\nFlags affecting the created sandbox.\nSpecified options for a <code>Flatpak::spawn</code> request.\nFlags marking what optional features are available.\nA response containing the update information when an …\nThe interface exposes some interactions with Flatpak on …\nA response of the update progress signal.\nThe update status.\nKill the sandbox when the caller disappears from the …\nKill the sandbox when the caller disappears from the …\nSet a file descriptor of the directory that  will be used …\nEnds the update monitoring and cancels any ongoing …\nCreates an update monitor object that will emit signals …\nThe error name, sent when status is <code>UpdateStatus::Failed</code>.\nThe error message, sent when status is <code>UpdateStatus::Failed</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis method lets trusted applications (insider or outside …\nThis methods let you send a Unix signal to a process that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe locally installed OSTree commit.\nThe number of operations that the update consists of.\nCreate a new instance of <code>Flatpak</code>.\nCreate a new instance of <code>Development</code>\nThe position of the currently active operation.\nThe progress of the currently active operation, as a …\nA signal received when there’s progress during the …\nEmitted when a process started by <code>spawn()</code> exits.\nEmitted when a process started by <code>host_command()</code> exits.\nEmitted when a process starts by <code>spawn()</code>.\nA signal received when there’s an application update.\nThe available commit to install.\nThe currently running OSTree commit.\nSets the list of filenames for files to expose the new …\nSets the list of file descriptors of files to expose the …\nSets the list of file descriptors of files to expose the …\nSets the list of filenames for files to expose the new …\nSets the created sandbox flags.\nThis methods let you start a new instance of your …\nThis methods let you send a Unix signal to a process that …\nThe overall status of the update.\nFlags marking what optional features are available.\nEnv variables to unset.\nAsks to install an update of the calling app.\nSet a file descriptor of the directory that  will be used …")